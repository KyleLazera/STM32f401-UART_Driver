
UART_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e14  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000fa8  08000fa8  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000fa8  08000fa8  00020054  2**0
                  CONTENTS
  4 .ARM          00000000  08000fa8  08000fa8  00020054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fa8  08000fa8  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fa8  08000fa8  00010fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000fac  08000fac  00010fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08000fb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  20000054  08001004  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08001004  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001fc1  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000084c  00000000  00000000  00022088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001b8  00000000  00000000  000228d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000013c  00000000  00000000  00022a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000d451  00000000  00000000  00022bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000021ff  00000000  00000000  0003001d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00051729  00000000  00000000  0003221c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000614  00000000  00000000  00083948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  00083f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000054 	.word	0x20000054
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000f90 	.word	0x08000f90

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000058 	.word	0x20000058
 80001d0:	08000f90 	.word	0x08000f90

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	; (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <GPIO_Config>:
 * 			0x0		or		GPIO_PUPD_None
 * 			0x1		or		GPIO_PullUp
 * 			0x2		or		GPIO_PullDown
 */
void GPIO_Config(GPIO_Config_t *GPIO_Config, GPIO_TypeDef *Port, uint8_t Pin, uint8_t Mode, uint8_t OType, uint8_t OSpeed, uint8_t PUPD)
{
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	60f8      	str	r0, [r7, #12]
 8000218:	60b9      	str	r1, [r7, #8]
 800021a:	4611      	mov	r1, r2
 800021c:	461a      	mov	r2, r3
 800021e:	460b      	mov	r3, r1
 8000220:	71fb      	strb	r3, [r7, #7]
 8000222:	4613      	mov	r3, r2
 8000224:	71bb      	strb	r3, [r7, #6]
	GPIO_Config->GPIO_Pin = Pin;
 8000226:	68fb      	ldr	r3, [r7, #12]
 8000228:	79fa      	ldrb	r2, [r7, #7]
 800022a:	701a      	strb	r2, [r3, #0]
	GPIO_Config->GPIO_Port = Port;
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	68ba      	ldr	r2, [r7, #8]
 8000230:	609a      	str	r2, [r3, #8]
	GPIO_Config->GPIO_MODE = Mode;
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	79ba      	ldrb	r2, [r7, #6]
 8000236:	705a      	strb	r2, [r3, #1]
	GPIO_Config->GPIO_OTYPE = OType;
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	7e3a      	ldrb	r2, [r7, #24]
 800023c:	709a      	strb	r2, [r3, #2]
	GPIO_Config->GPIO_OSPEED = OSpeed;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	7f3a      	ldrb	r2, [r7, #28]
 8000242:	70da      	strb	r2, [r3, #3]
	GPIO_Config->GPIO_PUPD = PUPD;
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	f897 2020 	ldrb.w	r2, [r7, #32]
 800024a:	711a      	strb	r2, [r3, #4]
}
 800024c:	bf00      	nop
 800024e:	3714      	adds	r7, #20
 8000250:	46bd      	mov	sp, r7
 8000252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000256:	4770      	bx	lr

08000258 <GPIO_PeriphClck>:
 * @param	GPIOx: Defines the specific GPIO port, where x can range from A - E, or H.
 *
 * @param	state: Specifies whether to enable or disable the peripheral.
 */
void GPIO_PeriphClck(GPIO_TypeDef *GPIOx, FunctionalState state)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
 8000260:	460b      	mov	r3, r1
 8000262:	70fb      	strb	r3, [r7, #3]
	if(state == ENABLE)
 8000264:	78fb      	ldrb	r3, [r7, #3]
 8000266:	2b01      	cmp	r3, #1
 8000268:	d135      	bne.n	80002d6 <GPIO_PeriphClck+0x7e>
	{
		if(GPIOx == GPIOA)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	4a36      	ldr	r2, [pc, #216]	; (8000348 <GPIO_PeriphClck+0xf0>)
 800026e:	4293      	cmp	r3, r2
 8000270:	d104      	bne.n	800027c <GPIO_PeriphClck+0x24>
		{
			RCC_AHB1Cmd(GPIOA_Enable, ENABLE);
 8000272:	2101      	movs	r1, #1
 8000274:	2001      	movs	r0, #1
 8000276:	f000 facf 	bl	8000818 <RCC_AHB1Cmd>
			RCC_AHB1Cmd(GPIOH_Enable, DISABLE);
		}

	}

}
 800027a:	e061      	b.n	8000340 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOB)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	4a33      	ldr	r2, [pc, #204]	; (800034c <GPIO_PeriphClck+0xf4>)
 8000280:	4293      	cmp	r3, r2
 8000282:	d104      	bne.n	800028e <GPIO_PeriphClck+0x36>
			RCC_AHB1Cmd(GPIOB_Enable, ENABLE);
 8000284:	2101      	movs	r1, #1
 8000286:	2002      	movs	r0, #2
 8000288:	f000 fac6 	bl	8000818 <RCC_AHB1Cmd>
}
 800028c:	e058      	b.n	8000340 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOC)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	4a2f      	ldr	r2, [pc, #188]	; (8000350 <GPIO_PeriphClck+0xf8>)
 8000292:	4293      	cmp	r3, r2
 8000294:	d104      	bne.n	80002a0 <GPIO_PeriphClck+0x48>
			RCC_AHB1Cmd(GPIOC_Enable, ENABLE);
 8000296:	2101      	movs	r1, #1
 8000298:	2004      	movs	r0, #4
 800029a:	f000 fabd 	bl	8000818 <RCC_AHB1Cmd>
}
 800029e:	e04f      	b.n	8000340 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOD)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	4a2c      	ldr	r2, [pc, #176]	; (8000354 <GPIO_PeriphClck+0xfc>)
 80002a4:	4293      	cmp	r3, r2
 80002a6:	d104      	bne.n	80002b2 <GPIO_PeriphClck+0x5a>
			RCC_AHB1Cmd(GPIOD_Enable, ENABLE);
 80002a8:	2101      	movs	r1, #1
 80002aa:	2008      	movs	r0, #8
 80002ac:	f000 fab4 	bl	8000818 <RCC_AHB1Cmd>
}
 80002b0:	e046      	b.n	8000340 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOE)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	4a28      	ldr	r2, [pc, #160]	; (8000358 <GPIO_PeriphClck+0x100>)
 80002b6:	4293      	cmp	r3, r2
 80002b8:	d104      	bne.n	80002c4 <GPIO_PeriphClck+0x6c>
			RCC_AHB1Cmd(GPIOE_Enable, ENABLE);
 80002ba:	2101      	movs	r1, #1
 80002bc:	2010      	movs	r0, #16
 80002be:	f000 faab 	bl	8000818 <RCC_AHB1Cmd>
}
 80002c2:	e03d      	b.n	8000340 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOH)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	4a25      	ldr	r2, [pc, #148]	; (800035c <GPIO_PeriphClck+0x104>)
 80002c8:	4293      	cmp	r3, r2
 80002ca:	d139      	bne.n	8000340 <GPIO_PeriphClck+0xe8>
			RCC_AHB1Cmd(GPIOH_Enable, ENABLE);
 80002cc:	2101      	movs	r1, #1
 80002ce:	2080      	movs	r0, #128	; 0x80
 80002d0:	f000 faa2 	bl	8000818 <RCC_AHB1Cmd>
}
 80002d4:	e034      	b.n	8000340 <GPIO_PeriphClck+0xe8>
		if(GPIOx == GPIOA)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	4a1b      	ldr	r2, [pc, #108]	; (8000348 <GPIO_PeriphClck+0xf0>)
 80002da:	4293      	cmp	r3, r2
 80002dc:	d104      	bne.n	80002e8 <GPIO_PeriphClck+0x90>
			RCC_AHB1Cmd(GPIOA_Enable, DISABLE);
 80002de:	2100      	movs	r1, #0
 80002e0:	2001      	movs	r0, #1
 80002e2:	f000 fa99 	bl	8000818 <RCC_AHB1Cmd>
}
 80002e6:	e02b      	b.n	8000340 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOB)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	4a18      	ldr	r2, [pc, #96]	; (800034c <GPIO_PeriphClck+0xf4>)
 80002ec:	4293      	cmp	r3, r2
 80002ee:	d104      	bne.n	80002fa <GPIO_PeriphClck+0xa2>
			RCC_AHB1Cmd(GPIOB_Enable, DISABLE);
 80002f0:	2100      	movs	r1, #0
 80002f2:	2002      	movs	r0, #2
 80002f4:	f000 fa90 	bl	8000818 <RCC_AHB1Cmd>
}
 80002f8:	e022      	b.n	8000340 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOC)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	4a14      	ldr	r2, [pc, #80]	; (8000350 <GPIO_PeriphClck+0xf8>)
 80002fe:	4293      	cmp	r3, r2
 8000300:	d104      	bne.n	800030c <GPIO_PeriphClck+0xb4>
			RCC_AHB1Cmd(GPIOC_Enable, DISABLE);
 8000302:	2100      	movs	r1, #0
 8000304:	2004      	movs	r0, #4
 8000306:	f000 fa87 	bl	8000818 <RCC_AHB1Cmd>
}
 800030a:	e019      	b.n	8000340 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOD)
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	4a11      	ldr	r2, [pc, #68]	; (8000354 <GPIO_PeriphClck+0xfc>)
 8000310:	4293      	cmp	r3, r2
 8000312:	d104      	bne.n	800031e <GPIO_PeriphClck+0xc6>
			RCC_AHB1Cmd(GPIOD_Enable, DISABLE);
 8000314:	2100      	movs	r1, #0
 8000316:	2008      	movs	r0, #8
 8000318:	f000 fa7e 	bl	8000818 <RCC_AHB1Cmd>
}
 800031c:	e010      	b.n	8000340 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOE)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4a0d      	ldr	r2, [pc, #52]	; (8000358 <GPIO_PeriphClck+0x100>)
 8000322:	4293      	cmp	r3, r2
 8000324:	d104      	bne.n	8000330 <GPIO_PeriphClck+0xd8>
			RCC_AHB1Cmd(GPIOE_Enable, DISABLE);
 8000326:	2100      	movs	r1, #0
 8000328:	2010      	movs	r0, #16
 800032a:	f000 fa75 	bl	8000818 <RCC_AHB1Cmd>
}
 800032e:	e007      	b.n	8000340 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOH)
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	4a0a      	ldr	r2, [pc, #40]	; (800035c <GPIO_PeriphClck+0x104>)
 8000334:	4293      	cmp	r3, r2
 8000336:	d103      	bne.n	8000340 <GPIO_PeriphClck+0xe8>
			RCC_AHB1Cmd(GPIOH_Enable, DISABLE);
 8000338:	2100      	movs	r1, #0
 800033a:	2080      	movs	r0, #128	; 0x80
 800033c:	f000 fa6c 	bl	8000818 <RCC_AHB1Cmd>
}
 8000340:	bf00      	nop
 8000342:	3708      	adds	r7, #8
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	40020000 	.word	0x40020000
 800034c:	40020400 	.word	0x40020400
 8000350:	40020800 	.word	0x40020800
 8000354:	40020c00 	.word	0x40020c00
 8000358:	40021000 	.word	0x40021000
 800035c:	40021c00 	.word	0x40021c00

08000360 <GPIO_Init>:
 *
 * @param	GPIO_Config: pointer to the GPIO_Config_t data structure that contains the
 * 			configuration parameters for the specific GPIO pin.
 */
void GPIO_Init(GPIO_Config_t *GPIO_Config)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b084      	sub	sp, #16
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
	uint8_t pin = GPIO_Config->GPIO_Pin;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	73fb      	strb	r3, [r7, #15]
	uint32_t temp_variable;

	GPIO_PeriphClck(GPIO_Config->GPIO_Port, ENABLE);
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	689b      	ldr	r3, [r3, #8]
 8000372:	2101      	movs	r1, #1
 8000374:	4618      	mov	r0, r3
 8000376:	f7ff ff6f 	bl	8000258 <GPIO_PeriphClck>

	if(GPIO_Config->GPIO_Pin == AllPins)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	2b10      	cmp	r3, #16
 8000380:	f040 8094 	bne.w	80004ac <GPIO_Init+0x14c>
	{
		if(GPIO_Config->GPIO_Port == GPIOA)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	689b      	ldr	r3, [r3, #8]
 8000388:	4a83      	ldr	r2, [pc, #524]	; (8000598 <GPIO_Init+0x238>)
 800038a:	4293      	cmp	r3, r2
 800038c:	d112      	bne.n	80003b4 <GPIO_Init+0x54>
		{
			/*Use the lock configuration to lock PA13 and PA14*/
			GPIO_Config->GPIO_Port->LCKR = LCKR_1_Pin13_Pin14;
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	689b      	ldr	r3, [r3, #8]
 8000392:	f44f 32b0 	mov.w	r2, #90112	; 0x16000
 8000396:	61da      	str	r2, [r3, #28]
			GPIO_Config->GPIO_Port->LCKR = LCKR_0_Pin13_Pin14;
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	689b      	ldr	r3, [r3, #8]
 800039c:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80003a0:	61da      	str	r2, [r3, #28]
			GPIO_Config->GPIO_Port->LCKR = LCKR_1_Pin13_Pin14;
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	689b      	ldr	r3, [r3, #8]
 80003a6:	f44f 32b0 	mov.w	r2, #90112	; 0x16000
 80003aa:	61da      	str	r2, [r3, #28]
			temp_variable = GPIO_Config->GPIO_Port->LCKR;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	689b      	ldr	r3, [r3, #8]
 80003b0:	69db      	ldr	r3, [r3, #28]
 80003b2:	60bb      	str	r3, [r7, #8]
		}

		/*Used to set each pin is AllPins is set by user*/
		for(pin = 0; pin < 16; pin++)
 80003b4:	2300      	movs	r3, #0
 80003b6:	73fb      	strb	r3, [r7, #15]
 80003b8:	e074      	b.n	80004a4 <GPIO_Init+0x144>
		{
			GPIO_Config->GPIO_Port->MODER &= ~(GPIO_Mode_Reset << (pin * 2));
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	689b      	ldr	r3, [r3, #8]
 80003be:	681a      	ldr	r2, [r3, #0]
 80003c0:	7bfb      	ldrb	r3, [r7, #15]
 80003c2:	005b      	lsls	r3, r3, #1
 80003c4:	2103      	movs	r1, #3
 80003c6:	fa01 f303 	lsl.w	r3, r1, r3
 80003ca:	43db      	mvns	r3, r3
 80003cc:	4619      	mov	r1, r3
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	689b      	ldr	r3, [r3, #8]
 80003d2:	400a      	ands	r2, r1
 80003d4:	601a      	str	r2, [r3, #0]
			GPIO_Config->GPIO_Port->MODER |= ((GPIO_Config->GPIO_MODE) << (pin * 2));
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	689b      	ldr	r3, [r3, #8]
 80003da:	681a      	ldr	r2, [r3, #0]
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	785b      	ldrb	r3, [r3, #1]
 80003e0:	4619      	mov	r1, r3
 80003e2:	7bfb      	ldrb	r3, [r7, #15]
 80003e4:	005b      	lsls	r3, r3, #1
 80003e6:	fa01 f303 	lsl.w	r3, r1, r3
 80003ea:	4619      	mov	r1, r3
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	689b      	ldr	r3, [r3, #8]
 80003f0:	430a      	orrs	r2, r1
 80003f2:	601a      	str	r2, [r3, #0]

			GPIO_Config->GPIO_Port->OTYPER &= ~(GPIO_OType_Reset << pin);
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	689b      	ldr	r3, [r3, #8]
 80003f8:	685a      	ldr	r2, [r3, #4]
 80003fa:	7bfb      	ldrb	r3, [r7, #15]
 80003fc:	2101      	movs	r1, #1
 80003fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000402:	43db      	mvns	r3, r3
 8000404:	4619      	mov	r1, r3
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	689b      	ldr	r3, [r3, #8]
 800040a:	400a      	ands	r2, r1
 800040c:	605a      	str	r2, [r3, #4]
			GPIO_Config->GPIO_Port->OTYPER |= ((GPIO_Config->GPIO_OTYPE) << pin);
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	689b      	ldr	r3, [r3, #8]
 8000412:	685a      	ldr	r2, [r3, #4]
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	789b      	ldrb	r3, [r3, #2]
 8000418:	4619      	mov	r1, r3
 800041a:	7bfb      	ldrb	r3, [r7, #15]
 800041c:	fa01 f303 	lsl.w	r3, r1, r3
 8000420:	4619      	mov	r1, r3
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	689b      	ldr	r3, [r3, #8]
 8000426:	430a      	orrs	r2, r1
 8000428:	605a      	str	r2, [r3, #4]

			GPIO_Config->GPIO_Port->OSPEEDR &= ~(GPIO_OSpeed_Reset << (pin * 2));
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	689b      	ldr	r3, [r3, #8]
 800042e:	689a      	ldr	r2, [r3, #8]
 8000430:	7bfb      	ldrb	r3, [r7, #15]
 8000432:	005b      	lsls	r3, r3, #1
 8000434:	2101      	movs	r1, #1
 8000436:	fa01 f303 	lsl.w	r3, r1, r3
 800043a:	43db      	mvns	r3, r3
 800043c:	4619      	mov	r1, r3
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	689b      	ldr	r3, [r3, #8]
 8000442:	400a      	ands	r2, r1
 8000444:	609a      	str	r2, [r3, #8]
			GPIO_Config->GPIO_Port->OSPEEDR |= ((GPIO_Config->GPIO_OSPEED) << (pin * 2));
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	689b      	ldr	r3, [r3, #8]
 800044a:	689a      	ldr	r2, [r3, #8]
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	78db      	ldrb	r3, [r3, #3]
 8000450:	4619      	mov	r1, r3
 8000452:	7bfb      	ldrb	r3, [r7, #15]
 8000454:	005b      	lsls	r3, r3, #1
 8000456:	fa01 f303 	lsl.w	r3, r1, r3
 800045a:	4619      	mov	r1, r3
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	689b      	ldr	r3, [r3, #8]
 8000460:	430a      	orrs	r2, r1
 8000462:	609a      	str	r2, [r3, #8]

			GPIO_Config->GPIO_Port->PUPDR &= ~(GPIO_PUPD_Reset << (pin * 2));
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	689b      	ldr	r3, [r3, #8]
 8000468:	68da      	ldr	r2, [r3, #12]
 800046a:	7bfb      	ldrb	r3, [r7, #15]
 800046c:	005b      	lsls	r3, r3, #1
 800046e:	2103      	movs	r1, #3
 8000470:	fa01 f303 	lsl.w	r3, r1, r3
 8000474:	43db      	mvns	r3, r3
 8000476:	4619      	mov	r1, r3
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	689b      	ldr	r3, [r3, #8]
 800047c:	400a      	ands	r2, r1
 800047e:	60da      	str	r2, [r3, #12]
			GPIO_Config->GPIO_Port->PUPDR |= ((GPIO_Config->GPIO_PUPD) << (pin * 2));
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	689b      	ldr	r3, [r3, #8]
 8000484:	68da      	ldr	r2, [r3, #12]
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	791b      	ldrb	r3, [r3, #4]
 800048a:	4619      	mov	r1, r3
 800048c:	7bfb      	ldrb	r3, [r7, #15]
 800048e:	005b      	lsls	r3, r3, #1
 8000490:	fa01 f303 	lsl.w	r3, r1, r3
 8000494:	4619      	mov	r1, r3
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	689b      	ldr	r3, [r3, #8]
 800049a:	430a      	orrs	r2, r1
 800049c:	60da      	str	r2, [r3, #12]
		for(pin = 0; pin < 16; pin++)
 800049e:	7bfb      	ldrb	r3, [r7, #15]
 80004a0:	3301      	adds	r3, #1
 80004a2:	73fb      	strb	r3, [r7, #15]
 80004a4:	7bfb      	ldrb	r3, [r7, #15]
 80004a6:	2b0f      	cmp	r3, #15
 80004a8:	d987      	bls.n	80003ba <GPIO_Init+0x5a>

		GPIO_Config->GPIO_Port->PUPDR &= ~(GPIO_PUPD_Reset << (pin * 2));
		GPIO_Config->GPIO_Port->PUPDR |= ((GPIO_Config->GPIO_PUPD) << (pin * 2));
	}

}
 80004aa:	e071      	b.n	8000590 <GPIO_Init+0x230>
		GPIO_Config->GPIO_Port->MODER &= ~(GPIO_Mode_Reset << (pin * 2));
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	689b      	ldr	r3, [r3, #8]
 80004b0:	681a      	ldr	r2, [r3, #0]
 80004b2:	7bfb      	ldrb	r3, [r7, #15]
 80004b4:	005b      	lsls	r3, r3, #1
 80004b6:	2103      	movs	r1, #3
 80004b8:	fa01 f303 	lsl.w	r3, r1, r3
 80004bc:	43db      	mvns	r3, r3
 80004be:	4619      	mov	r1, r3
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	689b      	ldr	r3, [r3, #8]
 80004c4:	400a      	ands	r2, r1
 80004c6:	601a      	str	r2, [r3, #0]
		GPIO_Config->GPIO_Port->MODER |= ((GPIO_Config->GPIO_MODE) << (pin * 2));
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	689b      	ldr	r3, [r3, #8]
 80004cc:	681a      	ldr	r2, [r3, #0]
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	785b      	ldrb	r3, [r3, #1]
 80004d2:	4619      	mov	r1, r3
 80004d4:	7bfb      	ldrb	r3, [r7, #15]
 80004d6:	005b      	lsls	r3, r3, #1
 80004d8:	fa01 f303 	lsl.w	r3, r1, r3
 80004dc:	4619      	mov	r1, r3
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	689b      	ldr	r3, [r3, #8]
 80004e2:	430a      	orrs	r2, r1
 80004e4:	601a      	str	r2, [r3, #0]
		GPIO_Config->GPIO_Port->OTYPER &= ~(GPIO_OType_Reset << pin);
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	689b      	ldr	r3, [r3, #8]
 80004ea:	685a      	ldr	r2, [r3, #4]
 80004ec:	7bfb      	ldrb	r3, [r7, #15]
 80004ee:	2101      	movs	r1, #1
 80004f0:	fa01 f303 	lsl.w	r3, r1, r3
 80004f4:	43db      	mvns	r3, r3
 80004f6:	4619      	mov	r1, r3
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	689b      	ldr	r3, [r3, #8]
 80004fc:	400a      	ands	r2, r1
 80004fe:	605a      	str	r2, [r3, #4]
		GPIO_Config->GPIO_Port->OTYPER |= ((GPIO_Config->GPIO_OTYPE) << pin);
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	689b      	ldr	r3, [r3, #8]
 8000504:	685a      	ldr	r2, [r3, #4]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	789b      	ldrb	r3, [r3, #2]
 800050a:	4619      	mov	r1, r3
 800050c:	7bfb      	ldrb	r3, [r7, #15]
 800050e:	fa01 f303 	lsl.w	r3, r1, r3
 8000512:	4619      	mov	r1, r3
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	689b      	ldr	r3, [r3, #8]
 8000518:	430a      	orrs	r2, r1
 800051a:	605a      	str	r2, [r3, #4]
		GPIO_Config->GPIO_Port->OSPEEDR &= ~(GPIO_OSpeed_Reset << (pin * 2));
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	689b      	ldr	r3, [r3, #8]
 8000520:	689a      	ldr	r2, [r3, #8]
 8000522:	7bfb      	ldrb	r3, [r7, #15]
 8000524:	005b      	lsls	r3, r3, #1
 8000526:	2101      	movs	r1, #1
 8000528:	fa01 f303 	lsl.w	r3, r1, r3
 800052c:	43db      	mvns	r3, r3
 800052e:	4619      	mov	r1, r3
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	689b      	ldr	r3, [r3, #8]
 8000534:	400a      	ands	r2, r1
 8000536:	609a      	str	r2, [r3, #8]
		GPIO_Config->GPIO_Port->OSPEEDR |= ((GPIO_Config->GPIO_OSPEED) << (pin * 2));
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	689b      	ldr	r3, [r3, #8]
 800053c:	689a      	ldr	r2, [r3, #8]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	78db      	ldrb	r3, [r3, #3]
 8000542:	4619      	mov	r1, r3
 8000544:	7bfb      	ldrb	r3, [r7, #15]
 8000546:	005b      	lsls	r3, r3, #1
 8000548:	fa01 f303 	lsl.w	r3, r1, r3
 800054c:	4619      	mov	r1, r3
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	689b      	ldr	r3, [r3, #8]
 8000552:	430a      	orrs	r2, r1
 8000554:	609a      	str	r2, [r3, #8]
		GPIO_Config->GPIO_Port->PUPDR &= ~(GPIO_PUPD_Reset << (pin * 2));
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	689b      	ldr	r3, [r3, #8]
 800055a:	68da      	ldr	r2, [r3, #12]
 800055c:	7bfb      	ldrb	r3, [r7, #15]
 800055e:	005b      	lsls	r3, r3, #1
 8000560:	2103      	movs	r1, #3
 8000562:	fa01 f303 	lsl.w	r3, r1, r3
 8000566:	43db      	mvns	r3, r3
 8000568:	4619      	mov	r1, r3
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	689b      	ldr	r3, [r3, #8]
 800056e:	400a      	ands	r2, r1
 8000570:	60da      	str	r2, [r3, #12]
		GPIO_Config->GPIO_Port->PUPDR |= ((GPIO_Config->GPIO_PUPD) << (pin * 2));
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	689b      	ldr	r3, [r3, #8]
 8000576:	68da      	ldr	r2, [r3, #12]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	791b      	ldrb	r3, [r3, #4]
 800057c:	4619      	mov	r1, r3
 800057e:	7bfb      	ldrb	r3, [r7, #15]
 8000580:	005b      	lsls	r3, r3, #1
 8000582:	fa01 f303 	lsl.w	r3, r1, r3
 8000586:	4619      	mov	r1, r3
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	689b      	ldr	r3, [r3, #8]
 800058c:	430a      	orrs	r2, r1
 800058e:	60da      	str	r2, [r3, #12]
}
 8000590:	bf00      	nop
 8000592:	3710      	adds	r7, #16
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40020000 	.word	0x40020000

0800059c <GPIO_AlternateFunctionConfig>:
 * @param	alt_function: This will take in the alternate function value that the user wishes to use.
 * 			The specific alternate function values and their functions are present in the data sheet.
 * 			The inputs for this function are AF0 - AF15;
 */
void GPIO_AlternateFunctionConfig(GPIO_Config_t *GPIO_Config, AFR_Config_t alt_function)
{
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	460b      	mov	r3, r1
 80005a6:	70fb      	strb	r3, [r7, #3]
	uint8_t pin = GPIO_Config->GPIO_Pin;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	73fb      	strb	r3, [r7, #15]
	uint8_t alt_function_array = pin/8;
 80005ae:	7bfb      	ldrb	r3, [r7, #15]
 80005b0:	08db      	lsrs	r3, r3, #3
 80005b2:	73bb      	strb	r3, [r7, #14]

	if(alt_function_array == 1)
 80005b4:	7bbb      	ldrb	r3, [r7, #14]
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d102      	bne.n	80005c0 <GPIO_AlternateFunctionConfig+0x24>
	{
		pin -= 8;
 80005ba:	7bfb      	ldrb	r3, [r7, #15]
 80005bc:	3b08      	subs	r3, #8
 80005be:	73fb      	strb	r3, [r7, #15]
	}

	GPIO_Config->GPIO_Port->AFR[alt_function_array] &= ~(AF15 << (pin * 4));
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	689b      	ldr	r3, [r3, #8]
 80005c4:	7bba      	ldrb	r2, [r7, #14]
 80005c6:	3208      	adds	r2, #8
 80005c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80005cc:	7bfb      	ldrb	r3, [r7, #15]
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	220f      	movs	r2, #15
 80005d2:	fa02 f303 	lsl.w	r3, r2, r3
 80005d6:	43db      	mvns	r3, r3
 80005d8:	4618      	mov	r0, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	689b      	ldr	r3, [r3, #8]
 80005de:	7bba      	ldrb	r2, [r7, #14]
 80005e0:	4001      	ands	r1, r0
 80005e2:	3208      	adds	r2, #8
 80005e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GPIO_Config->GPIO_Port->AFR[alt_function_array] |= (alt_function << (pin * 4));
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	689b      	ldr	r3, [r3, #8]
 80005ec:	7bba      	ldrb	r2, [r7, #14]
 80005ee:	3208      	adds	r2, #8
 80005f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80005f4:	78fa      	ldrb	r2, [r7, #3]
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
 80005f8:	009b      	lsls	r3, r3, #2
 80005fa:	fa02 f303 	lsl.w	r3, r2, r3
 80005fe:	4618      	mov	r0, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	689b      	ldr	r3, [r3, #8]
 8000604:	7bba      	ldrb	r2, [r7, #14]
 8000606:	4301      	orrs	r1, r0
 8000608:	3208      	adds	r2, #8
 800060a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800060e:	bf00      	nop
 8000610:	3714      	adds	r7, #20
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr

0800061a <GPIO_WritePin>:
 *			GPIO_Reset		or		0x2
 *			GPIO_Toggle		or		0x3
 */

void GPIO_WritePin(GPIO_Config_t *GPIO_Config, uint8_t State)
{
 800061a:	b480      	push	{r7}
 800061c:	b085      	sub	sp, #20
 800061e:	af00      	add	r7, sp, #0
 8000620:	6078      	str	r0, [r7, #4]
 8000622:	460b      	mov	r3, r1
 8000624:	70fb      	strb	r3, [r7, #3]
	uint8_t pin = GPIO_Config->GPIO_Pin;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	73fb      	strb	r3, [r7, #15]

	if(State == GPIO_Write)
 800062c:	78fb      	ldrb	r3, [r7, #3]
 800062e:	2b01      	cmp	r3, #1
 8000630:	d10a      	bne.n	8000648 <GPIO_WritePin+0x2e>
	{
		GPIO_Config->GPIO_Port->ODR |= (0x1UL << pin);
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	689b      	ldr	r3, [r3, #8]
 8000636:	6959      	ldr	r1, [r3, #20]
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	2201      	movs	r2, #1
 800063c:	409a      	lsls	r2, r3
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	689b      	ldr	r3, [r3, #8]
 8000642:	430a      	orrs	r2, r1
 8000644:	615a      	str	r2, [r3, #20]
	else if(State == GPIO_Toggle)
	{
		GPIO_Config->GPIO_Port->ODR ^= (0x1UL << pin);
	}

}
 8000646:	e01c      	b.n	8000682 <GPIO_WritePin+0x68>
	else if(State == GPIO_Reset)
 8000648:	78fb      	ldrb	r3, [r7, #3]
 800064a:	2b02      	cmp	r3, #2
 800064c:	d10c      	bne.n	8000668 <GPIO_WritePin+0x4e>
		GPIO_Config->GPIO_Port->ODR &= ~(0x1UL << pin);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	689b      	ldr	r3, [r3, #8]
 8000652:	6959      	ldr	r1, [r3, #20]
 8000654:	7bfb      	ldrb	r3, [r7, #15]
 8000656:	2201      	movs	r2, #1
 8000658:	fa02 f303 	lsl.w	r3, r2, r3
 800065c:	43da      	mvns	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	689b      	ldr	r3, [r3, #8]
 8000662:	400a      	ands	r2, r1
 8000664:	615a      	str	r2, [r3, #20]
}
 8000666:	e00c      	b.n	8000682 <GPIO_WritePin+0x68>
	else if(State == GPIO_Toggle)
 8000668:	78fb      	ldrb	r3, [r7, #3]
 800066a:	2b03      	cmp	r3, #3
 800066c:	d109      	bne.n	8000682 <GPIO_WritePin+0x68>
		GPIO_Config->GPIO_Port->ODR ^= (0x1UL << pin);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	689b      	ldr	r3, [r3, #8]
 8000672:	6959      	ldr	r1, [r3, #20]
 8000674:	7bfb      	ldrb	r3, [r7, #15]
 8000676:	2201      	movs	r2, #1
 8000678:	409a      	lsls	r2, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	689b      	ldr	r3, [r3, #8]
 800067e:	404a      	eors	r2, r1
 8000680:	615a      	str	r2, [r3, #20]
}
 8000682:	bf00      	nop
 8000684:	3714      	adds	r7, #20
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
	...

08000690 <GPIO_EXTIConfig>:
 * 			EXTI_FallingTrigger
 * 			EXTI_Rising_FallingTrigger
 *
 */
void GPIO_EXTIConfig(uint8_t port, uint8_t pin, uint8_t edge_trigger)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
 800069a:	460b      	mov	r3, r1
 800069c:	71bb      	strb	r3, [r7, #6]
 800069e:	4613      	mov	r3, r2
 80006a0:	717b      	strb	r3, [r7, #5]
	uint8_t exti_array = pin/4;
 80006a2:	79bb      	ldrb	r3, [r7, #6]
 80006a4:	089b      	lsrs	r3, r3, #2
 80006a6:	73bb      	strb	r3, [r7, #14]
	uint8_t temp_pin = pin;
 80006a8:	79bb      	ldrb	r3, [r7, #6]
 80006aa:	73fb      	strb	r3, [r7, #15]

	RCC_APB2Cmd(RCC_APB2ENR_SYSCFGEN, ENABLE);
 80006ac:	2101      	movs	r1, #1
 80006ae:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80006b2:	f000 f8f1 	bl	8000898 <RCC_APB2Cmd>

	switch(exti_array)
 80006b6:	7bbb      	ldrb	r3, [r7, #14]
 80006b8:	2b03      	cmp	r3, #3
 80006ba:	d00e      	beq.n	80006da <GPIO_EXTIConfig+0x4a>
 80006bc:	2b03      	cmp	r3, #3
 80006be:	dc10      	bgt.n	80006e2 <GPIO_EXTIConfig+0x52>
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d002      	beq.n	80006ca <GPIO_EXTIConfig+0x3a>
 80006c4:	2b02      	cmp	r3, #2
 80006c6:	d004      	beq.n	80006d2 <GPIO_EXTIConfig+0x42>
 80006c8:	e00b      	b.n	80006e2 <GPIO_EXTIConfig+0x52>
	{
	case 1:
		temp_pin -= 4;
 80006ca:	7bfb      	ldrb	r3, [r7, #15]
 80006cc:	3b04      	subs	r3, #4
 80006ce:	73fb      	strb	r3, [r7, #15]
		break;
 80006d0:	e007      	b.n	80006e2 <GPIO_EXTIConfig+0x52>

	case 2:
		temp_pin -= 8;
 80006d2:	7bfb      	ldrb	r3, [r7, #15]
 80006d4:	3b08      	subs	r3, #8
 80006d6:	73fb      	strb	r3, [r7, #15]
		break;
 80006d8:	e003      	b.n	80006e2 <GPIO_EXTIConfig+0x52>

	case 3:
		temp_pin -= 12;
 80006da:	7bfb      	ldrb	r3, [r7, #15]
 80006dc:	3b0c      	subs	r3, #12
 80006de:	73fb      	strb	r3, [r7, #15]
		break;
 80006e0:	bf00      	nop
	}

	SYSCFG->EXTICR[exti_array] |= (port << (temp_pin * 4));
 80006e2:	4a4b      	ldr	r2, [pc, #300]	; (8000810 <GPIO_EXTIConfig+0x180>)
 80006e4:	7bbb      	ldrb	r3, [r7, #14]
 80006e6:	3302      	adds	r3, #2
 80006e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006ec:	79f9      	ldrb	r1, [r7, #7]
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	fa01 f303 	lsl.w	r3, r1, r3
 80006f6:	4618      	mov	r0, r3
 80006f8:	4945      	ldr	r1, [pc, #276]	; (8000810 <GPIO_EXTIConfig+0x180>)
 80006fa:	7bbb      	ldrb	r3, [r7, #14]
 80006fc:	4302      	orrs	r2, r0
 80006fe:	3302      	adds	r3, #2
 8000700:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	EXTI->IMR |= (EXTI_IMR_Set << pin);
 8000704:	4b43      	ldr	r3, [pc, #268]	; (8000814 <GPIO_EXTIConfig+0x184>)
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	79bb      	ldrb	r3, [r7, #6]
 800070a:	2101      	movs	r1, #1
 800070c:	fa01 f303 	lsl.w	r3, r1, r3
 8000710:	4940      	ldr	r1, [pc, #256]	; (8000814 <GPIO_EXTIConfig+0x184>)
 8000712:	4313      	orrs	r3, r2
 8000714:	600b      	str	r3, [r1, #0]

	/*Setting the edge trigger as either rising of falling edge*/
	switch(edge_trigger)
 8000716:	797b      	ldrb	r3, [r7, #5]
 8000718:	2b02      	cmp	r3, #2
 800071a:	d02e      	beq.n	800077a <GPIO_EXTIConfig+0xea>
 800071c:	2b02      	cmp	r3, #2
 800071e:	dc3f      	bgt.n	80007a0 <GPIO_EXTIConfig+0x110>
 8000720:	2b00      	cmp	r3, #0
 8000722:	d002      	beq.n	800072a <GPIO_EXTIConfig+0x9a>
 8000724:	2b01      	cmp	r3, #1
 8000726:	d014      	beq.n	8000752 <GPIO_EXTIConfig+0xc2>
 8000728:	e03a      	b.n	80007a0 <GPIO_EXTIConfig+0x110>
	{
	case EXTI_RisingTrigger:
		EXTI->FTSR &= ~(EXTI_Trigger_Set << pin);
 800072a:	4b3a      	ldr	r3, [pc, #232]	; (8000814 <GPIO_EXTIConfig+0x184>)
 800072c:	68da      	ldr	r2, [r3, #12]
 800072e:	79bb      	ldrb	r3, [r7, #6]
 8000730:	2101      	movs	r1, #1
 8000732:	fa01 f303 	lsl.w	r3, r1, r3
 8000736:	43db      	mvns	r3, r3
 8000738:	4936      	ldr	r1, [pc, #216]	; (8000814 <GPIO_EXTIConfig+0x184>)
 800073a:	4013      	ands	r3, r2
 800073c:	60cb      	str	r3, [r1, #12]
		EXTI->RTSR |= (EXTI_Trigger_Set << pin);
 800073e:	4b35      	ldr	r3, [pc, #212]	; (8000814 <GPIO_EXTIConfig+0x184>)
 8000740:	689a      	ldr	r2, [r3, #8]
 8000742:	79bb      	ldrb	r3, [r7, #6]
 8000744:	2101      	movs	r1, #1
 8000746:	fa01 f303 	lsl.w	r3, r1, r3
 800074a:	4932      	ldr	r1, [pc, #200]	; (8000814 <GPIO_EXTIConfig+0x184>)
 800074c:	4313      	orrs	r3, r2
 800074e:	608b      	str	r3, [r1, #8]
		break;
 8000750:	e026      	b.n	80007a0 <GPIO_EXTIConfig+0x110>

	case EXTI_FallingTrigger:
		EXTI->RTSR &= ~(EXTI_Trigger_Set << pin);
 8000752:	4b30      	ldr	r3, [pc, #192]	; (8000814 <GPIO_EXTIConfig+0x184>)
 8000754:	689a      	ldr	r2, [r3, #8]
 8000756:	79bb      	ldrb	r3, [r7, #6]
 8000758:	2101      	movs	r1, #1
 800075a:	fa01 f303 	lsl.w	r3, r1, r3
 800075e:	43db      	mvns	r3, r3
 8000760:	492c      	ldr	r1, [pc, #176]	; (8000814 <GPIO_EXTIConfig+0x184>)
 8000762:	4013      	ands	r3, r2
 8000764:	608b      	str	r3, [r1, #8]
		EXTI->FTSR |= (EXTI_Trigger_Set << pin);
 8000766:	4b2b      	ldr	r3, [pc, #172]	; (8000814 <GPIO_EXTIConfig+0x184>)
 8000768:	68da      	ldr	r2, [r3, #12]
 800076a:	79bb      	ldrb	r3, [r7, #6]
 800076c:	2101      	movs	r1, #1
 800076e:	fa01 f303 	lsl.w	r3, r1, r3
 8000772:	4928      	ldr	r1, [pc, #160]	; (8000814 <GPIO_EXTIConfig+0x184>)
 8000774:	4313      	orrs	r3, r2
 8000776:	60cb      	str	r3, [r1, #12]
		break;
 8000778:	e012      	b.n	80007a0 <GPIO_EXTIConfig+0x110>

	case EXTI_Rising_FallingTrigger:
		EXTI->RTSR |= (EXTI_Trigger_Set << pin);
 800077a:	4b26      	ldr	r3, [pc, #152]	; (8000814 <GPIO_EXTIConfig+0x184>)
 800077c:	689a      	ldr	r2, [r3, #8]
 800077e:	79bb      	ldrb	r3, [r7, #6]
 8000780:	2101      	movs	r1, #1
 8000782:	fa01 f303 	lsl.w	r3, r1, r3
 8000786:	4923      	ldr	r1, [pc, #140]	; (8000814 <GPIO_EXTIConfig+0x184>)
 8000788:	4313      	orrs	r3, r2
 800078a:	608b      	str	r3, [r1, #8]
		EXTI->FTSR |= (EXTI_Trigger_Set << pin);
 800078c:	4b21      	ldr	r3, [pc, #132]	; (8000814 <GPIO_EXTIConfig+0x184>)
 800078e:	68da      	ldr	r2, [r3, #12]
 8000790:	79bb      	ldrb	r3, [r7, #6]
 8000792:	2101      	movs	r1, #1
 8000794:	fa01 f303 	lsl.w	r3, r1, r3
 8000798:	491e      	ldr	r1, [pc, #120]	; (8000814 <GPIO_EXTIConfig+0x184>)
 800079a:	4313      	orrs	r3, r2
 800079c:	60cb      	str	r3, [r1, #12]
		break;
 800079e:	bf00      	nop
	}

	/*Enabling a specific EXTI Line*/
	if(pin == 0)
 80007a0:	79bb      	ldrb	r3, [r7, #6]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d103      	bne.n	80007ae <GPIO_EXTIConfig+0x11e>
	{
		NVIC_EnableIRQ(EXTI0_IRQn);
 80007a6:	2006      	movs	r0, #6
 80007a8:	f7ff fd14 	bl	80001d4 <__NVIC_EnableIRQ>
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);

	}

}
 80007ac:	e02b      	b.n	8000806 <GPIO_EXTIConfig+0x176>
	else if(pin == 1)
 80007ae:	79bb      	ldrb	r3, [r7, #6]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d103      	bne.n	80007bc <GPIO_EXTIConfig+0x12c>
		NVIC_EnableIRQ(EXTI1_IRQn);
 80007b4:	2007      	movs	r0, #7
 80007b6:	f7ff fd0d 	bl	80001d4 <__NVIC_EnableIRQ>
}
 80007ba:	e024      	b.n	8000806 <GPIO_EXTIConfig+0x176>
	else if(pin == 2)
 80007bc:	79bb      	ldrb	r3, [r7, #6]
 80007be:	2b02      	cmp	r3, #2
 80007c0:	d103      	bne.n	80007ca <GPIO_EXTIConfig+0x13a>
		NVIC_EnableIRQ(EXTI2_IRQn);
 80007c2:	2008      	movs	r0, #8
 80007c4:	f7ff fd06 	bl	80001d4 <__NVIC_EnableIRQ>
}
 80007c8:	e01d      	b.n	8000806 <GPIO_EXTIConfig+0x176>
	else if(pin == 3)
 80007ca:	79bb      	ldrb	r3, [r7, #6]
 80007cc:	2b03      	cmp	r3, #3
 80007ce:	d103      	bne.n	80007d8 <GPIO_EXTIConfig+0x148>
		NVIC_EnableIRQ(EXTI3_IRQn);
 80007d0:	2009      	movs	r0, #9
 80007d2:	f7ff fcff 	bl	80001d4 <__NVIC_EnableIRQ>
}
 80007d6:	e016      	b.n	8000806 <GPIO_EXTIConfig+0x176>
	else if(pin == 4)
 80007d8:	79bb      	ldrb	r3, [r7, #6]
 80007da:	2b04      	cmp	r3, #4
 80007dc:	d103      	bne.n	80007e6 <GPIO_EXTIConfig+0x156>
		NVIC_EnableIRQ(EXTI4_IRQn);
 80007de:	200a      	movs	r0, #10
 80007e0:	f7ff fcf8 	bl	80001d4 <__NVIC_EnableIRQ>
}
 80007e4:	e00f      	b.n	8000806 <GPIO_EXTIConfig+0x176>
	else if(pin > 4 && pin < 10)
 80007e6:	79bb      	ldrb	r3, [r7, #6]
 80007e8:	2b04      	cmp	r3, #4
 80007ea:	d906      	bls.n	80007fa <GPIO_EXTIConfig+0x16a>
 80007ec:	79bb      	ldrb	r3, [r7, #6]
 80007ee:	2b09      	cmp	r3, #9
 80007f0:	d803      	bhi.n	80007fa <GPIO_EXTIConfig+0x16a>
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 80007f2:	2017      	movs	r0, #23
 80007f4:	f7ff fcee 	bl	80001d4 <__NVIC_EnableIRQ>
}
 80007f8:	e005      	b.n	8000806 <GPIO_EXTIConfig+0x176>
	else if(pin > 10)
 80007fa:	79bb      	ldrb	r3, [r7, #6]
 80007fc:	2b0a      	cmp	r3, #10
 80007fe:	d902      	bls.n	8000806 <GPIO_EXTIConfig+0x176>
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000800:	2028      	movs	r0, #40	; 0x28
 8000802:	f7ff fce7 	bl	80001d4 <__NVIC_EnableIRQ>
}
 8000806:	bf00      	nop
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40013800 	.word	0x40013800
 8000814:	40013c00 	.word	0x40013c00

08000818 <RCC_AHB1Cmd>:
 * @param	AHB1_Periph: Specific peripheral selected by the user (GPIOx, SPIx, I2Cx etc)
 *
 * @param	State: Specifies whether to enable or disable the peripheral.
 */
void RCC_AHB1Cmd(uint32_t AHB1_Periph, FunctionalState State)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	460b      	mov	r3, r1
 8000822:	70fb      	strb	r3, [r7, #3]
	if(State == ENABLE)
 8000824:	78fb      	ldrb	r3, [r7, #3]
 8000826:	2b01      	cmp	r3, #1
 8000828:	d106      	bne.n	8000838 <RCC_AHB1Cmd+0x20>
	{
		RCC->AHB1ENR |= AHB1_Periph;
 800082a:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <RCC_AHB1Cmd+0x3c>)
 800082c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800082e:	4909      	ldr	r1, [pc, #36]	; (8000854 <RCC_AHB1Cmd+0x3c>)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4313      	orrs	r3, r2
 8000834:	630b      	str	r3, [r1, #48]	; 0x30

	else
	{
		RCC->AHB1ENR &= ~AHB1_Periph;
	}
}
 8000836:	e006      	b.n	8000846 <RCC_AHB1Cmd+0x2e>
		RCC->AHB1ENR &= ~AHB1_Periph;
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <RCC_AHB1Cmd+0x3c>)
 800083a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	43db      	mvns	r3, r3
 8000840:	4904      	ldr	r1, [pc, #16]	; (8000854 <RCC_AHB1Cmd+0x3c>)
 8000842:	4013      	ands	r3, r2
 8000844:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000846:	bf00      	nop
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	40023800 	.word	0x40023800

08000858 <RCC_APB1Cmd>:
 * @param	APB1_Periph: Specific peripheral selected by the user (GPIOx, SPIx, I2Cx etc)
 *
 * @param	State: Specifies whether to enable or disable the peripheral.
 */
void RCC_APB1Cmd(uint32_t APB1_Periph, FunctionalState State)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	460b      	mov	r3, r1
 8000862:	70fb      	strb	r3, [r7, #3]
	if(State == ENABLE)
 8000864:	78fb      	ldrb	r3, [r7, #3]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d106      	bne.n	8000878 <RCC_APB1Cmd+0x20>
	{
		RCC->APB1ENR |= APB1_Periph;
 800086a:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <RCC_APB1Cmd+0x3c>)
 800086c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800086e:	4909      	ldr	r1, [pc, #36]	; (8000894 <RCC_APB1Cmd+0x3c>)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4313      	orrs	r3, r2
 8000874:	640b      	str	r3, [r1, #64]	; 0x40

	else
	{
		RCC->APB1ENR &= ~APB1_Periph;
	}
}
 8000876:	e006      	b.n	8000886 <RCC_APB1Cmd+0x2e>
		RCC->APB1ENR &= ~APB1_Periph;
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <RCC_APB1Cmd+0x3c>)
 800087a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	43db      	mvns	r3, r3
 8000880:	4904      	ldr	r1, [pc, #16]	; (8000894 <RCC_APB1Cmd+0x3c>)
 8000882:	4013      	ands	r3, r2
 8000884:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	40023800 	.word	0x40023800

08000898 <RCC_APB2Cmd>:
 * @param	APB2_Periph: Specific peripheral selected by the user (GPIOx, SPIx, I2Cx etc)
 *
 * @param	State: Specifies whether to enable or disable the peripheral.
 */
void RCC_APB2Cmd(uint32_t APB2_Periph, FunctionalState State)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	460b      	mov	r3, r1
 80008a2:	70fb      	strb	r3, [r7, #3]
	if(State == ENABLE)
 80008a4:	78fb      	ldrb	r3, [r7, #3]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d106      	bne.n	80008b8 <RCC_APB2Cmd+0x20>
	{
		RCC->APB2ENR |= APB2_Periph;
 80008aa:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <RCC_APB2Cmd+0x3c>)
 80008ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008ae:	4909      	ldr	r1, [pc, #36]	; (80008d4 <RCC_APB2Cmd+0x3c>)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4313      	orrs	r3, r2
 80008b4:	644b      	str	r3, [r1, #68]	; 0x44

	else
	{
		RCC->APB2ENR &= ~APB2_Periph;
	}
}
 80008b6:	e006      	b.n	80008c6 <RCC_APB2Cmd+0x2e>
		RCC->APB2ENR &= ~APB2_Periph;
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <RCC_APB2Cmd+0x3c>)
 80008ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	43db      	mvns	r3, r3
 80008c0:	4904      	ldr	r1, [pc, #16]	; (80008d4 <RCC_APB2Cmd+0x3c>)
 80008c2:	4013      	ands	r3, r2
 80008c4:	644b      	str	r3, [r1, #68]	; 0x44
}
 80008c6:	bf00      	nop
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	40023800 	.word	0x40023800

080008d8 <RCC_GetClockFreq>:
 *
 * @param	ClockSource: Points to the ClockSource data structure which contains the varibales to hold
 * 			the frequencies of the SYSCLCK, HCLCK, PCLCK1, PCLCK2.
 */
void RCC_GetClockFreq(RCC_ClockFrequency_t *ClockSource)
{
 80008d8:	b480      	push	{r7}
 80008da:	b08b      	sub	sp, #44	; 0x2c
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
	uint32_t pll_Value = 0, plln = 0, pllm = 2, pllp = 2, pll_src = 0, pll_fvco = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	623b      	str	r3, [r7, #32]
 80008e4:	2300      	movs	r3, #0
 80008e6:	61fb      	str	r3, [r7, #28]
 80008e8:	2302      	movs	r3, #2
 80008ea:	61bb      	str	r3, [r7, #24]
 80008ec:	2302      	movs	r3, #2
 80008ee:	617b      	str	r3, [r7, #20]
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
 80008f4:	2300      	movs	r3, #0
 80008f6:	613b      	str	r3, [r7, #16]

	uint32_t temp_variable, prescaler;

	/*Determine the clock source for the SYSCLCK*/
	if(((RCC->CFGR & RCC_CFGR_SWS_Mask) >> 2) == 0x0)
 80008f8:	4b43      	ldr	r3, [pc, #268]	; (8000a08 <RCC_GetClockFreq+0x130>)
 80008fa:	689b      	ldr	r3, [r3, #8]
 80008fc:	089b      	lsrs	r3, r3, #2
 80008fe:	f003 0303 	and.w	r3, r3, #3
 8000902:	2b00      	cmp	r3, #0
 8000904:	d103      	bne.n	800090e <RCC_GetClockFreq+0x36>
	{
		ClockSource->SYSCLCK = HSI_Value;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4a40      	ldr	r2, [pc, #256]	; (8000a0c <RCC_GetClockFreq+0x134>)
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	e03f      	b.n	800098e <RCC_GetClockFreq+0xb6>
	}

	else if(((RCC->CFGR & RCC_CFGR_SWS_Mask) >> 2) == 0x1)
 800090e:	4b3e      	ldr	r3, [pc, #248]	; (8000a08 <RCC_GetClockFreq+0x130>)
 8000910:	689b      	ldr	r3, [r3, #8]
 8000912:	089b      	lsrs	r3, r3, #2
 8000914:	f003 0303 	and.w	r3, r3, #3
 8000918:	2b01      	cmp	r3, #1
 800091a:	d103      	bne.n	8000924 <RCC_GetClockFreq+0x4c>
	{
		ClockSource->SYSCLCK = HSE_Value;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	4a3c      	ldr	r2, [pc, #240]	; (8000a10 <RCC_GetClockFreq+0x138>)
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	e034      	b.n	800098e <RCC_GetClockFreq+0xb6>
	}

	else if(((RCC->CFGR & RCC_CFGR_SWS_Mask) >> 2) == 0x2)
 8000924:	4b38      	ldr	r3, [pc, #224]	; (8000a08 <RCC_GetClockFreq+0x130>)
 8000926:	689b      	ldr	r3, [r3, #8]
 8000928:	089b      	lsrs	r3, r3, #2
 800092a:	f003 0303 	and.w	r3, r3, #3
 800092e:	2b02      	cmp	r3, #2
 8000930:	d12d      	bne.n	800098e <RCC_GetClockFreq+0xb6>
	{
		/*Determine the input source of the PLL*/
		if(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC_Mask)
 8000932:	4b35      	ldr	r3, [pc, #212]	; (8000a08 <RCC_GetClockFreq+0x130>)
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800093a:	2b00      	cmp	r3, #0
 800093c:	d002      	beq.n	8000944 <RCC_GetClockFreq+0x6c>
		{
			pll_src = HSE_Value;
 800093e:	4b34      	ldr	r3, [pc, #208]	; (8000a10 <RCC_GetClockFreq+0x138>)
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
 8000942:	e001      	b.n	8000948 <RCC_GetClockFreq+0x70>
		}

		else
		{
			pll_src = HSI_Value;
 8000944:	4b31      	ldr	r3, [pc, #196]	; (8000a0c <RCC_GetClockFreq+0x134>)
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
		}

		plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN_Mask) >> 6);
 8000948:	4b2f      	ldr	r3, [pc, #188]	; (8000a08 <RCC_GetClockFreq+0x130>)
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	099b      	lsrs	r3, r3, #6
 800094e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000952:	61fb      	str	r3, [r7, #28]
		pllm = (RCC->PLLCFGR & RCC_PLLCFGR_PLLM_Mask);
 8000954:	4b2c      	ldr	r3, [pc, #176]	; (8000a08 <RCC_GetClockFreq+0x130>)
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800095c:	61bb      	str	r3, [r7, #24]
		pll_fvco = (pll_src/pllm) * plln;
 800095e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000960:	69bb      	ldr	r3, [r7, #24]
 8000962:	fbb2 f2f3 	udiv	r2, r2, r3
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	fb02 f303 	mul.w	r3, r2, r3
 800096c:	613b      	str	r3, [r7, #16]
		pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP_Mask) >> 16) * 2) + 2);
 800096e:	4b26      	ldr	r3, [pc, #152]	; (8000a08 <RCC_GetClockFreq+0x130>)
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	0c1b      	lsrs	r3, r3, #16
 8000974:	f003 0303 	and.w	r3, r3, #3
 8000978:	3301      	adds	r3, #1
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	617b      	str	r3, [r7, #20]
		pll_Value = pll_fvco/pllp;
 800097e:	693a      	ldr	r2, [r7, #16]
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	fbb2 f3f3 	udiv	r3, r2, r3
 8000986:	623b      	str	r3, [r7, #32]

		ClockSource->SYSCLCK = pll_Value;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6a3a      	ldr	r2, [r7, #32]
 800098c:	601a      	str	r2, [r3, #0]
	}

	/*Determine the frequency of the HCLCK*/
	temp_variable = ((RCC->CFGR & RCC_CFGR_HPRE_Mask) >> 4);
 800098e:	4b1e      	ldr	r3, [pc, #120]	; (8000a08 <RCC_GetClockFreq+0x130>)
 8000990:	689b      	ldr	r3, [r3, #8]
 8000992:	091b      	lsrs	r3, r3, #4
 8000994:	f003 030f 	and.w	r3, r3, #15
 8000998:	60fb      	str	r3, [r7, #12]
	prescaler = prescalerTable[temp_variable];
 800099a:	4a1e      	ldr	r2, [pc, #120]	; (8000a14 <RCC_GetClockFreq+0x13c>)
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009a2:	b29b      	uxth	r3, r3
 80009a4:	60bb      	str	r3, [r7, #8]
	ClockSource->HCLCK = (ClockSource->SYSCLCK) >> prescaler;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	40da      	lsrs	r2, r3
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	605a      	str	r2, [r3, #4]

	/*Determine the frequency of the PCLCK1*/
	temp_variable = ((RCC->CFGR & RCC_CFGR_PPRE1_Mask) >> 10);
 80009b2:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <RCC_GetClockFreq+0x130>)
 80009b4:	689b      	ldr	r3, [r3, #8]
 80009b6:	0a9b      	lsrs	r3, r3, #10
 80009b8:	f003 0307 	and.w	r3, r3, #7
 80009bc:	60fb      	str	r3, [r7, #12]
	prescaler = prescalerTable[temp_variable];
 80009be:	4a15      	ldr	r2, [pc, #84]	; (8000a14 <RCC_GetClockFreq+0x13c>)
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009c6:	b29b      	uxth	r3, r3
 80009c8:	60bb      	str	r3, [r7, #8]
	ClockSource->PCLCK1 = (ClockSource->HCLCK) >> prescaler;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	685a      	ldr	r2, [r3, #4]
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	40da      	lsrs	r2, r3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	609a      	str	r2, [r3, #8]

	/*Determine frequency of PCLCK2*/
	temp_variable = ((RCC->CFGR & RCC_CFGR_PPRE2_Mask) >> 13);
 80009d6:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <RCC_GetClockFreq+0x130>)
 80009d8:	689b      	ldr	r3, [r3, #8]
 80009da:	0b5b      	lsrs	r3, r3, #13
 80009dc:	f003 0307 	and.w	r3, r3, #7
 80009e0:	60fb      	str	r3, [r7, #12]
	prescaler = prescalerTable[temp_variable];
 80009e2:	4a0c      	ldr	r2, [pc, #48]	; (8000a14 <RCC_GetClockFreq+0x13c>)
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	60bb      	str	r3, [r7, #8]
	ClockSource->PCLCK2 = (ClockSource->HCLCK) >> prescaler;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	685a      	ldr	r2, [r3, #4]
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	40da      	lsrs	r2, r3
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	60da      	str	r2, [r3, #12]

}
 80009fa:	bf00      	nop
 80009fc:	372c      	adds	r7, #44	; 0x2c
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	00f42400 	.word	0x00f42400
 8000a10:	007a1200 	.word	0x007a1200
 8000a14:	20000000 	.word	0x20000000

08000a18 <UART_Config>:
 *
 * @param	baudrate: Allows the user to input their desired baud-rate for the UART peripheral.
 *
 */
void UART_Config(UART_Config_t *UART_Config, USART_TypeDef *UARTx, uint16_t mode, uint32_t baudrate)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	4613      	mov	r3, r2
 8000a26:	80fb      	strh	r3, [r7, #6]
	UART_Config->UARTx = UARTx;
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	68ba      	ldr	r2, [r7, #8]
 8000a2c:	611a      	str	r2, [r3, #16]
	UART_Config->Mode = mode;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	88fa      	ldrh	r2, [r7, #6]
 8000a32:	819a      	strh	r2, [r3, #12]
	UART_Config->BaudRate = baudrate;
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	683a      	ldr	r2, [r7, #0]
 8000a38:	609a      	str	r2, [r3, #8]
	UART_Config->World_Length = UART_WORDLEN_8BITS;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	805a      	strh	r2, [r3, #2]
	UART_Config->Parity = UART_PARITY_DISABLED;
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	2200      	movs	r2, #0
 8000a44:	80da      	strh	r2, [r3, #6]
	UART_Config->oversampling = UART_OVERSAMPLING_16;
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	2200      	movs	r2, #0
 8000a4a:	809a      	strh	r2, [r3, #4]
	UART_Config->Stop_Bits = UART_STOPBITS_1;
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	2200      	movs	r2, #0
 8000a50:	801a      	strh	r2, [r3, #0]
}
 8000a52:	bf00      	nop
 8000a54:	3714      	adds	r7, #20
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <Select_UART_Periph>:
 *
 * @param	alt_function: Defines the alternate function value to input into the Alternate function register.
 *
 */
void Select_UART_Periph(GPIO_TypeDef *GPIOx, uint8_t pin, AFR_Config_t alt_function)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b08c      	sub	sp, #48	; 0x30
 8000a62:	af04      	add	r7, sp, #16
 8000a64:	6078      	str	r0, [r7, #4]
 8000a66:	460b      	mov	r3, r1
 8000a68:	70fb      	strb	r3, [r7, #3]
 8000a6a:	4613      	mov	r3, r2
 8000a6c:	70bb      	strb	r3, [r7, #2]
	GPIO_Config_t GPIOx_UARTx_Tx, GPIOx_UARTx_Rx;

	GPIO_Config(&GPIOx_UARTx_Tx, GPIOx, pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8000a6e:	78fa      	ldrb	r2, [r7, #3]
 8000a70:	f107 0014 	add.w	r0, r7, #20
 8000a74:	2300      	movs	r3, #0
 8000a76:	9302      	str	r3, [sp, #8]
 8000a78:	2300      	movs	r3, #0
 8000a7a:	9301      	str	r3, [sp, #4]
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	9300      	str	r3, [sp, #0]
 8000a80:	2302      	movs	r3, #2
 8000a82:	6879      	ldr	r1, [r7, #4]
 8000a84:	f7ff fbc4 	bl	8000210 <GPIO_Config>
	GPIO_Init(&GPIOx_UARTx_Tx);
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff fc67 	bl	8000360 <GPIO_Init>
	GPIO_AlternateFunctionConfig(&GPIOx_UARTx_Tx, alt_function);
 8000a92:	78ba      	ldrb	r2, [r7, #2]
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	4611      	mov	r1, r2
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff fd7e 	bl	800059c <GPIO_AlternateFunctionConfig>

	GPIO_Config(&GPIOx_UARTx_Rx, GPIOx, (pin + 1), GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8000aa0:	78fb      	ldrb	r3, [r7, #3]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	b2da      	uxtb	r2, r3
 8000aa6:	f107 0008 	add.w	r0, r7, #8
 8000aaa:	2300      	movs	r3, #0
 8000aac:	9302      	str	r3, [sp, #8]
 8000aae:	2300      	movs	r3, #0
 8000ab0:	9301      	str	r3, [sp, #4]
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	9300      	str	r3, [sp, #0]
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	6879      	ldr	r1, [r7, #4]
 8000aba:	f7ff fba9 	bl	8000210 <GPIO_Config>
	GPIO_Init(&GPIOx_UARTx_Rx);
 8000abe:	f107 0308 	add.w	r3, r7, #8
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff fc4c 	bl	8000360 <GPIO_Init>
	GPIO_AlternateFunctionConfig(&GPIOx_UARTx_Rx, alt_function);
 8000ac8:	78ba      	ldrb	r2, [r7, #2]
 8000aca:	f107 0308 	add.w	r3, r7, #8
 8000ace:	4611      	mov	r1, r2
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff fd63 	bl	800059c <GPIO_AlternateFunctionConfig>

}
 8000ad6:	bf00      	nop
 8000ad8:	3720      	adds	r7, #32
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
	...

08000ae0 <Enable_UART_Periph>:
 * 			based on the peripheral selected by the user.
 *
 * @param	UARTx: Defines which UART peripheral the user chooses, this can be: USART1, USART2 or USART6.
 */
void Enable_UART_Periph(USART_TypeDef *UARTx)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	if(UARTx == USART2)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4a1c      	ldr	r2, [pc, #112]	; (8000b5c <Enable_UART_Periph+0x7c>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d10f      	bne.n	8000b10 <Enable_UART_Periph+0x30>
	{

		Select_UART_Periph(GPIOA, Pin2, AF7);
 8000af0:	2207      	movs	r2, #7
 8000af2:	2102      	movs	r1, #2
 8000af4:	481a      	ldr	r0, [pc, #104]	; (8000b60 <Enable_UART_Periph+0x80>)
 8000af6:	f7ff ffb2 	bl	8000a5e <Select_UART_Periph>
		Select_UART_Periph(GPIOD, Pin5, AF7);
 8000afa:	2207      	movs	r2, #7
 8000afc:	2105      	movs	r1, #5
 8000afe:	4819      	ldr	r0, [pc, #100]	; (8000b64 <Enable_UART_Periph+0x84>)
 8000b00:	f7ff ffad 	bl	8000a5e <Select_UART_Periph>

		RCC_APB1Cmd(USART2_Enable, ENABLE);
 8000b04:	2101      	movs	r1, #1
 8000b06:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000b0a:	f7ff fea5 	bl	8000858 <RCC_APB1Cmd>
		Select_UART_Periph(GPIOC, Pin6, AF7);

		RCC_APB2Cmd(USART6_Enable, ENABLE);

	}
}
 8000b0e:	e020      	b.n	8000b52 <Enable_UART_Periph+0x72>
	else if(UARTx == USART1)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4a15      	ldr	r2, [pc, #84]	; (8000b68 <Enable_UART_Periph+0x88>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d10e      	bne.n	8000b36 <Enable_UART_Periph+0x56>
		Select_UART_Periph(GPIOA, Pin9, AF7);
 8000b18:	2207      	movs	r2, #7
 8000b1a:	2109      	movs	r1, #9
 8000b1c:	4810      	ldr	r0, [pc, #64]	; (8000b60 <Enable_UART_Periph+0x80>)
 8000b1e:	f7ff ff9e 	bl	8000a5e <Select_UART_Periph>
		Select_UART_Periph(GPIOB, Pin6, AF7);
 8000b22:	2207      	movs	r2, #7
 8000b24:	2106      	movs	r1, #6
 8000b26:	4811      	ldr	r0, [pc, #68]	; (8000b6c <Enable_UART_Periph+0x8c>)
 8000b28:	f7ff ff99 	bl	8000a5e <Select_UART_Periph>
		RCC_APB2Cmd(USART1_Enable, ENABLE);
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	2010      	movs	r0, #16
 8000b30:	f7ff feb2 	bl	8000898 <RCC_APB2Cmd>
}
 8000b34:	e00d      	b.n	8000b52 <Enable_UART_Periph+0x72>
		Select_UART_Periph(GPIOA, Pin11, AF8);
 8000b36:	2208      	movs	r2, #8
 8000b38:	210b      	movs	r1, #11
 8000b3a:	4809      	ldr	r0, [pc, #36]	; (8000b60 <Enable_UART_Periph+0x80>)
 8000b3c:	f7ff ff8f 	bl	8000a5e <Select_UART_Periph>
		Select_UART_Periph(GPIOC, Pin6, AF7);
 8000b40:	2207      	movs	r2, #7
 8000b42:	2106      	movs	r1, #6
 8000b44:	480a      	ldr	r0, [pc, #40]	; (8000b70 <Enable_UART_Periph+0x90>)
 8000b46:	f7ff ff8a 	bl	8000a5e <Select_UART_Periph>
		RCC_APB2Cmd(USART6_Enable, ENABLE);
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	2020      	movs	r0, #32
 8000b4e:	f7ff fea3 	bl	8000898 <RCC_APB2Cmd>
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40004400 	.word	0x40004400
 8000b60:	40020000 	.word	0x40020000
 8000b64:	40020c00 	.word	0x40020c00
 8000b68:	40011000 	.word	0x40011000
 8000b6c:	40020400 	.word	0x40020400
 8000b70:	40020800 	.word	0x40020800

08000b74 <Set_BaudRate>:
 *@param	ClockSource: Defines the specific clock source for the MCU which includes SYSCLK,
 *			HCLK, PCLK1, PCLK2.
 *
 */
void Set_BaudRate(RCC_ClockFrequency_t *ClockSource, UART_Config_t *UART_Config)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	; 0x28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
	RCC_GetClockFreq(ClockSource);
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f7ff feaa 	bl	80008d8 <RCC_GetClockFreq>

	uint32_t periph_clk, over8, usartdiv, baudrate;
	uint32_t mantissa_value, fraction_value, tempvariable = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	623b      	str	r3, [r7, #32]

	over8 = (UART_Config->UARTx->CR1) & (UART_CR1_OVER8_Mask);
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	691b      	ldr	r3, [r3, #16]
 8000b8c:	68db      	ldr	r3, [r3, #12]
 8000b8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b92:	61fb      	str	r3, [r7, #28]
	baudrate = UART_Config->BaudRate;
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	61bb      	str	r3, [r7, #24]

	if(UART_Config->UARTx == USART2)
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	691b      	ldr	r3, [r3, #16]
 8000b9e:	4a32      	ldr	r2, [pc, #200]	; (8000c68 <Set_BaudRate+0xf4>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d103      	bne.n	8000bac <Set_BaudRate+0x38>
	{
		periph_clk = ClockSource->PCLCK1;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	689b      	ldr	r3, [r3, #8]
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8000baa:	e002      	b.n	8000bb2 <Set_BaudRate+0x3e>
	}

	else
	{
		periph_clk = ClockSource->PCLCK2;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/*Over-sampling by 16*/
	if(over8 == 0)
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d125      	bne.n	8000c04 <Set_BaudRate+0x90>
	{
		usartdiv = (periph_clk * 100)/(16 * baudrate);
 8000bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bba:	2264      	movs	r2, #100	; 0x64
 8000bbc:	fb03 f202 	mul.w	r2, r3, r2
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	011b      	lsls	r3, r3, #4
 8000bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc8:	617b      	str	r3, [r7, #20]
		mantissa_value = usartdiv/100;
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	4a27      	ldr	r2, [pc, #156]	; (8000c6c <Set_BaudRate+0xf8>)
 8000bce:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd2:	095b      	lsrs	r3, r3, #5
 8000bd4:	613b      	str	r3, [r7, #16]
		tempvariable |= mantissa_value << 4;
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	011b      	lsls	r3, r3, #4
 8000bda:	6a3a      	ldr	r2, [r7, #32]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	623b      	str	r3, [r7, #32]

		fraction_value = (((usartdiv - (mantissa_value * 100)) * 16) + 50)/100;
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	2264      	movs	r2, #100	; 0x64
 8000be4:	fb02 f303 	mul.w	r3, r2, r3
 8000be8:	697a      	ldr	r2, [r7, #20]
 8000bea:	1ad3      	subs	r3, r2, r3
 8000bec:	011b      	lsls	r3, r3, #4
 8000bee:	3332      	adds	r3, #50	; 0x32
 8000bf0:	4a1e      	ldr	r2, [pc, #120]	; (8000c6c <Set_BaudRate+0xf8>)
 8000bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bf6:	095b      	lsrs	r3, r3, #5
 8000bf8:	60fb      	str	r3, [r7, #12]
		tempvariable |= fraction_value;
 8000bfa:	6a3a      	ldr	r2, [r7, #32]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	623b      	str	r3, [r7, #32]
 8000c02:	e024      	b.n	8000c4e <Set_BaudRate+0xda>
	}

	/*Over-sampling by 8*/
	else
	{
		usartdiv = ((periph_clk * 100)/(8 * baudrate));
 8000c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c06:	2264      	movs	r2, #100	; 0x64
 8000c08:	fb03 f202 	mul.w	r2, r3, r2
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	00db      	lsls	r3, r3, #3
 8000c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c14:	617b      	str	r3, [r7, #20]
		mantissa_value = usartdiv/100;
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	4a14      	ldr	r2, [pc, #80]	; (8000c6c <Set_BaudRate+0xf8>)
 8000c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c1e:	095b      	lsrs	r3, r3, #5
 8000c20:	613b      	str	r3, [r7, #16]
		tempvariable |= (mantissa_value << 4);
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	011b      	lsls	r3, r3, #4
 8000c26:	6a3a      	ldr	r2, [r7, #32]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	623b      	str	r3, [r7, #32]
		fraction_value = (((usartdiv - (mantissa_value * 100)) * 8) + 50)/100;
 8000c2c:	693b      	ldr	r3, [r7, #16]
 8000c2e:	2264      	movs	r2, #100	; 0x64
 8000c30:	fb02 f303 	mul.w	r3, r2, r3
 8000c34:	697a      	ldr	r2, [r7, #20]
 8000c36:	1ad3      	subs	r3, r2, r3
 8000c38:	00db      	lsls	r3, r3, #3
 8000c3a:	3332      	adds	r3, #50	; 0x32
 8000c3c:	4a0b      	ldr	r2, [pc, #44]	; (8000c6c <Set_BaudRate+0xf8>)
 8000c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c42:	095b      	lsrs	r3, r3, #5
 8000c44:	60fb      	str	r3, [r7, #12]
		tempvariable |= fraction_value;
 8000c46:	6a3a      	ldr	r2, [r7, #32]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	623b      	str	r3, [r7, #32]
	}

	UART_Config->UARTx->BRR |= tempvariable;
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	691b      	ldr	r3, [r3, #16]
 8000c52:	6899      	ldr	r1, [r3, #8]
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	691b      	ldr	r3, [r3, #16]
 8000c58:	6a3a      	ldr	r2, [r7, #32]
 8000c5a:	430a      	orrs	r2, r1
 8000c5c:	609a      	str	r2, [r3, #8]
}
 8000c5e:	bf00      	nop
 8000c60:	3728      	adds	r7, #40	; 0x28
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40004400 	.word	0x40004400
 8000c6c:	51eb851f 	.word	0x51eb851f

08000c70 <UART_Init>:
 *
 * @param	UART_Config_t: This points to the UART_Config_t data structure that holds all of the information for the
 * 			specific UART peripheral.
 */
void UART_Init(UART_Config_t *UART_Config)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	RCC_ClockFrequency_t Clock_Source;

	Enable_UART_Periph(UART_Config->UARTx);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	691b      	ldr	r3, [r3, #16]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ff2f 	bl	8000ae0 <Enable_UART_Periph>

	/**Configuring UART**/

	/*Select the Word-Length (8 bits/9 bits)*/
	UART_Config->UARTx->CR1 &= ~UART_WORDLEN_9BITS;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	691b      	ldr	r3, [r3, #16]
 8000c86:	68da      	ldr	r2, [r3, #12]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	691b      	ldr	r3, [r3, #16]
 8000c8c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000c90:	60da      	str	r2, [r3, #12]
	UART_Config->UARTx->CR1 |= UART_Config->World_Length;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	691b      	ldr	r3, [r3, #16]
 8000c96:	68da      	ldr	r2, [r3, #12]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	885b      	ldrh	r3, [r3, #2]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	691b      	ldr	r3, [r3, #16]
 8000ca2:	430a      	orrs	r2, r1
 8000ca4:	60da      	str	r2, [r3, #12]

	/*Select over-sampling (8 or 16)*/
	UART_Config->UARTx->CR1 &= ~UART_OVERSAMPLING_8;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	691b      	ldr	r3, [r3, #16]
 8000caa:	68da      	ldr	r2, [r3, #12]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	691b      	ldr	r3, [r3, #16]
 8000cb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000cb4:	60da      	str	r2, [r3, #12]
	UART_Config->UARTx->CR1 |= UART_Config->oversampling;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	691b      	ldr	r3, [r3, #16]
 8000cba:	68da      	ldr	r2, [r3, #12]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	889b      	ldrh	r3, [r3, #4]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	691b      	ldr	r3, [r3, #16]
 8000cc6:	430a      	orrs	r2, r1
 8000cc8:	60da      	str	r2, [r3, #12]

	/*Select transmission direction (Tx, Rx or Tx & Rx)*/
	UART_Config->UARTx->CR1 &= ~UART_MODE_TXRX;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	691b      	ldr	r3, [r3, #16]
 8000cce:	68da      	ldr	r2, [r3, #12]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	691b      	ldr	r3, [r3, #16]
 8000cd4:	f022 020c 	bic.w	r2, r2, #12
 8000cd8:	60da      	str	r2, [r3, #12]
	UART_Config->UARTx->CR1 |= UART_Config->Mode;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	691b      	ldr	r3, [r3, #16]
 8000cde:	68da      	ldr	r2, [r3, #12]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	899b      	ldrh	r3, [r3, #12]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	691b      	ldr	r3, [r3, #16]
 8000cea:	430a      	orrs	r2, r1
 8000cec:	60da      	str	r2, [r3, #12]

	/*Select parity (odd or even)*/
	UART_Config->UARTx->CR1 &= ~UART_PARITY_ODD;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	691b      	ldr	r3, [r3, #16]
 8000cf2:	68da      	ldr	r2, [r3, #12]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	691b      	ldr	r3, [r3, #16]
 8000cf8:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000cfc:	60da      	str	r2, [r3, #12]
	UART_Config->UARTx->CR1 |= UART_Config->Parity;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	691b      	ldr	r3, [r3, #16]
 8000d02:	68da      	ldr	r2, [r3, #12]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	88db      	ldrh	r3, [r3, #6]
 8000d08:	4619      	mov	r1, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	691b      	ldr	r3, [r3, #16]
 8000d0e:	430a      	orrs	r2, r1
 8000d10:	60da      	str	r2, [r3, #12]

	/*Select number of stop bits (0.5, 1, 1.5, 2)*/
	UART_Config->UARTx->CR2 &= ~UART_STOPBITS_1_5;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	691b      	ldr	r3, [r3, #16]
 8000d16:	691a      	ldr	r2, [r3, #16]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	691b      	ldr	r3, [r3, #16]
 8000d1c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000d20:	611a      	str	r2, [r3, #16]
	UART_Config->UARTx->CR2 |= UART_Config->Stop_Bits;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	691b      	ldr	r3, [r3, #16]
 8000d26:	691a      	ldr	r2, [r3, #16]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	881b      	ldrh	r3, [r3, #0]
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	691b      	ldr	r3, [r3, #16]
 8000d32:	430a      	orrs	r2, r1
 8000d34:	611a      	str	r2, [r3, #16]

	/*Calculate and set baud-rate*/
	Set_BaudRate(&Clock_Source, UART_Config);
 8000d36:	f107 0308 	add.w	r3, r7, #8
 8000d3a:	6879      	ldr	r1, [r7, #4]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff19 	bl	8000b74 <Set_BaudRate>

	/*Enable UART*/
	UART_Config->UARTx->CR1 |= UART_CR1_Enable;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	691b      	ldr	r3, [r3, #16]
 8000d46:	68da      	ldr	r2, [r3, #12]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	691b      	ldr	r3, [r3, #16]
 8000d4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000d50:	60da      	str	r2, [r3, #12]

}
 8000d52:	bf00      	nop
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <WriteByte>:
 * 			specific UART peripheral.
 *
 * @param	data: This specifies the data the user wishes to transmit.
 */
void WriteByte(UART_Config_t *UART_Config, uint16_t data)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	b083      	sub	sp, #12
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
 8000d62:	460b      	mov	r3, r1
 8000d64:	807b      	strh	r3, [r7, #2]
	while(!(UART_Config->UARTx->SR) && (UART_SR_TXE_Mask)){}
 8000d66:	bf00      	nop
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	691b      	ldr	r3, [r3, #16]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d0fa      	beq.n	8000d68 <WriteByte+0xe>

	//Word length is 9 bits
	if(UART_Config->UARTx->CR1 & UART_WORDLEN_9BITS)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	691b      	ldr	r3, [r3, #16]
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d01a      	beq.n	8000db6 <WriteByte+0x5c>
	{
		//If parity is enabled 8 bits of data are sent with the 9th bit being the parity bit
		if((UART_Config->UARTx->CR1 & UART_PARITY_EVEN) || (UART_Config->UARTx->CR1 & UART_PARITY_ODD))
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	691b      	ldr	r3, [r3, #16]
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d106      	bne.n	8000d9c <WriteByte+0x42>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	691b      	ldr	r3, [r3, #16]
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d005      	beq.n	8000da8 <WriteByte+0x4e>
		{
			UART_Config->UARTx->DR = ((uint8_t)data);
 8000d9c:	887b      	ldrh	r3, [r7, #2]
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	691b      	ldr	r3, [r3, #16]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	e021      	b.n	8000dec <WriteByte+0x92>
		}

		//If parity is disabled then all 9 bits of data will be read as information
		else
		{
			UART_Config->UARTx->DR = (data & 0x1FF);
 8000da8:	887a      	ldrh	r2, [r7, #2]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	691b      	ldr	r3, [r3, #16]
 8000dae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000db2:	605a      	str	r2, [r3, #4]
		else
		{
			UART_Config->UARTx->DR = ((uint8_t)data);
		}
	}
}
 8000db4:	e01a      	b.n	8000dec <WriteByte+0x92>
		if((UART_Config->UARTx->CR1 & UART_PARITY_EVEN) || (UART_Config->UARTx->CR1 & UART_PARITY_ODD))
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	691b      	ldr	r3, [r3, #16]
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d106      	bne.n	8000dd2 <WriteByte+0x78>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	691b      	ldr	r3, [r3, #16]
 8000dc8:	68db      	ldr	r3, [r3, #12]
 8000dca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d006      	beq.n	8000de0 <WriteByte+0x86>
			UART_Config->UARTx->DR = (data & 0x7F);
 8000dd2:	887a      	ldrh	r2, [r7, #2]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	691b      	ldr	r3, [r3, #16]
 8000dd8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	e005      	b.n	8000dec <WriteByte+0x92>
			UART_Config->UARTx->DR = ((uint8_t)data);
 8000de0:	887b      	ldrh	r3, [r7, #2]
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	691b      	ldr	r3, [r3, #16]
 8000de8:	605a      	str	r2, [r3, #4]
}
 8000dea:	e7ff      	b.n	8000dec <WriteByte+0x92>
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <PrintData>:
 * 			specific UART peripheral.
 *
 * @param	ptr: This points to a character array and allows the user to pass messages to the UART peripheral.
 */
int PrintData(UART_Config_t *UART_Config, char *ptr)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
	while(*ptr)
 8000e02:	e008      	b.n	8000e16 <PrintData+0x1e>
	{
		WriteByte(UART_Config, *ptr++);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	1c5a      	adds	r2, r3, #1
 8000e08:	603a      	str	r2, [r7, #0]
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	4619      	mov	r1, r3
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f7ff ffa2 	bl	8000d5a <WriteByte>
	while(*ptr)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d1f2      	bne.n	8000e04 <PrintData+0xc>
	}

	while(!(UART_Config->UARTx->SR & UART_SR_TC_Mask)){}
 8000e1e:	bf00      	nop
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	691b      	ldr	r3, [r3, #16]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d0f8      	beq.n	8000e20 <PrintData+0x28>

	return 1;
 8000e2e:	2301      	movs	r3, #1
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <main>:
char message[50] = "Button is Pressed\r\n";



int main()
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af04      	add	r7, sp, #16
	//Port A, Pin 5 (on-Board LED) - GPIO Output, push-pull, Low Speed and no pull-up/pull-down.
	GPIO_Config(&PortAPin5, GPIOA, Pin5, GPIO_Output, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8000e3e:	2300      	movs	r3, #0
 8000e40:	9302      	str	r3, [sp, #8]
 8000e42:	2300      	movs	r3, #0
 8000e44:	9301      	str	r3, [sp, #4]
 8000e46:	2300      	movs	r3, #0
 8000e48:	9300      	str	r3, [sp, #0]
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	2205      	movs	r2, #5
 8000e4e:	4913      	ldr	r1, [pc, #76]	; (8000e9c <main+0x64>)
 8000e50:	4813      	ldr	r0, [pc, #76]	; (8000ea0 <main+0x68>)
 8000e52:	f7ff f9dd 	bl	8000210 <GPIO_Config>
	GPIO_Init(&PortAPin5);
 8000e56:	4812      	ldr	r0, [pc, #72]	; (8000ea0 <main+0x68>)
 8000e58:	f7ff fa82 	bl	8000360 <GPIO_Init>

	// Port C, Pin 13 (on-board pushbutton) - GPIO Input, push-pull, Medium Speed and Pull-Up activated
	GPIO_Config(&PortCPin13, GPIOC, Pin13, GPIO_Input, GPIO_PushPull, GPIO_MediumSpeed, GPIO_PUPD_None);
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	9302      	str	r3, [sp, #8]
 8000e60:	2301      	movs	r3, #1
 8000e62:	9301      	str	r3, [sp, #4]
 8000e64:	2300      	movs	r3, #0
 8000e66:	9300      	str	r3, [sp, #0]
 8000e68:	2300      	movs	r3, #0
 8000e6a:	220d      	movs	r2, #13
 8000e6c:	490d      	ldr	r1, [pc, #52]	; (8000ea4 <main+0x6c>)
 8000e6e:	480e      	ldr	r0, [pc, #56]	; (8000ea8 <main+0x70>)
 8000e70:	f7ff f9ce 	bl	8000210 <GPIO_Config>
	GPIO_Init(&PortCPin13);
 8000e74:	480c      	ldr	r0, [pc, #48]	; (8000ea8 <main+0x70>)
 8000e76:	f7ff fa73 	bl	8000360 <GPIO_Init>

	//Configure the EXTI
	GPIO_EXTIConfig(EXTI_PortC, Pin13, EXTI_RisingTrigger);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	210d      	movs	r1, #13
 8000e7e:	2002      	movs	r0, #2
 8000e80:	f7ff fc06 	bl	8000690 <GPIO_EXTIConfig>

	//Configuring UART2 to be in reciever mode and have a badrate of 115200.
	UART_Config(&UART2, USART2, UART_MODE_TX, 115200);
 8000e84:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000e88:	2208      	movs	r2, #8
 8000e8a:	4908      	ldr	r1, [pc, #32]	; (8000eac <main+0x74>)
 8000e8c:	4808      	ldr	r0, [pc, #32]	; (8000eb0 <main+0x78>)
 8000e8e:	f7ff fdc3 	bl	8000a18 <UART_Config>

	UART_Init(&UART2);
 8000e92:	4807      	ldr	r0, [pc, #28]	; (8000eb0 <main+0x78>)
 8000e94:	f7ff feec 	bl	8000c70 <UART_Init>

	//Initiliaing the UART interrupt - This function must be called after UART_Init()
	//UART_Interrupt_Init(&UART2, UART_TXEIE_Enable);

	while(1)
 8000e98:	e7fe      	b.n	8000e98 <main+0x60>
 8000e9a:	bf00      	nop
 8000e9c:	40020000 	.word	0x40020000
 8000ea0:	20000084 	.word	0x20000084
 8000ea4:	40020800 	.word	0x40020800
 8000ea8:	20000090 	.word	0x20000090
 8000eac:	40004400 	.word	0x40004400
 8000eb0:	20000070 	.word	0x20000070

08000eb4 <EXTI15_10_IRQHandler>:
	}
}*/


void EXTI15_10_IRQHandler()
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	//Checking if interrupt flag is raised in pending register
	if((EXTI->PR & (1U << Pin13)) != 0)
 8000eb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <EXTI15_10_IRQHandler+0x30>)
 8000eba:	695b      	ldr	r3, [r3, #20]
 8000ebc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d00d      	beq.n	8000ee0 <EXTI15_10_IRQHandler+0x2c>
	{
		PrintData(&UART2, message);
 8000ec4:	4908      	ldr	r1, [pc, #32]	; (8000ee8 <EXTI15_10_IRQHandler+0x34>)
 8000ec6:	4809      	ldr	r0, [pc, #36]	; (8000eec <EXTI15_10_IRQHandler+0x38>)
 8000ec8:	f7ff ff96 	bl	8000df8 <PrintData>

		GPIO_WritePin(&PortAPin5, GPIO_Write);
 8000ecc:	2101      	movs	r1, #1
 8000ece:	4808      	ldr	r0, [pc, #32]	; (8000ef0 <EXTI15_10_IRQHandler+0x3c>)
 8000ed0:	f7ff fba3 	bl	800061a <GPIO_WritePin>

		//Clear the PR flag - cleared when a 1 is written to it
		EXTI->PR |= (1U << Pin13);
 8000ed4:	4b03      	ldr	r3, [pc, #12]	; (8000ee4 <EXTI15_10_IRQHandler+0x30>)
 8000ed6:	695b      	ldr	r3, [r3, #20]
 8000ed8:	4a02      	ldr	r2, [pc, #8]	; (8000ee4 <EXTI15_10_IRQHandler+0x30>)
 8000eda:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ede:	6153      	str	r3, [r2, #20]

	}

}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40013c00 	.word	0x40013c00
 8000ee8:	20000020 	.word	0x20000020
 8000eec:	20000070 	.word	0x20000070
 8000ef0:	20000084 	.word	0x20000084

08000ef4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ef4:	480d      	ldr	r0, [pc, #52]	; (8000f2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ef6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ef8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000efc:	480c      	ldr	r0, [pc, #48]	; (8000f30 <LoopForever+0x6>)
  ldr r1, =_edata
 8000efe:	490d      	ldr	r1, [pc, #52]	; (8000f34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f00:	4a0d      	ldr	r2, [pc, #52]	; (8000f38 <LoopForever+0xe>)
  movs r3, #0
 8000f02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f04:	e002      	b.n	8000f0c <LoopCopyDataInit>

08000f06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f0a:	3304      	adds	r3, #4

08000f0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f10:	d3f9      	bcc.n	8000f06 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f12:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f14:	4c0a      	ldr	r4, [pc, #40]	; (8000f40 <LoopForever+0x16>)
  movs r3, #0
 8000f16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f18:	e001      	b.n	8000f1e <LoopFillZerobss>

08000f1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f1c:	3204      	adds	r2, #4

08000f1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f20:	d3fb      	bcc.n	8000f1a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f22:	f000 f811 	bl	8000f48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f26:	f7ff ff87 	bl	8000e38 <main>

08000f2a <LoopForever>:

LoopForever:
  b LoopForever
 8000f2a:	e7fe      	b.n	8000f2a <LoopForever>
  ldr   r0, =_estack
 8000f2c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f34:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000f38:	08000fb0 	.word	0x08000fb0
  ldr r2, =_sbss
 8000f3c:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000f40:	2000009c 	.word	0x2000009c

08000f44 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f44:	e7fe      	b.n	8000f44 <ADC_IRQHandler>
	...

08000f48 <__libc_init_array>:
 8000f48:	b570      	push	{r4, r5, r6, lr}
 8000f4a:	4d0d      	ldr	r5, [pc, #52]	; (8000f80 <__libc_init_array+0x38>)
 8000f4c:	4c0d      	ldr	r4, [pc, #52]	; (8000f84 <__libc_init_array+0x3c>)
 8000f4e:	1b64      	subs	r4, r4, r5
 8000f50:	10a4      	asrs	r4, r4, #2
 8000f52:	2600      	movs	r6, #0
 8000f54:	42a6      	cmp	r6, r4
 8000f56:	d109      	bne.n	8000f6c <__libc_init_array+0x24>
 8000f58:	4d0b      	ldr	r5, [pc, #44]	; (8000f88 <__libc_init_array+0x40>)
 8000f5a:	4c0c      	ldr	r4, [pc, #48]	; (8000f8c <__libc_init_array+0x44>)
 8000f5c:	f000 f818 	bl	8000f90 <_init>
 8000f60:	1b64      	subs	r4, r4, r5
 8000f62:	10a4      	asrs	r4, r4, #2
 8000f64:	2600      	movs	r6, #0
 8000f66:	42a6      	cmp	r6, r4
 8000f68:	d105      	bne.n	8000f76 <__libc_init_array+0x2e>
 8000f6a:	bd70      	pop	{r4, r5, r6, pc}
 8000f6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f70:	4798      	blx	r3
 8000f72:	3601      	adds	r6, #1
 8000f74:	e7ee      	b.n	8000f54 <__libc_init_array+0xc>
 8000f76:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f7a:	4798      	blx	r3
 8000f7c:	3601      	adds	r6, #1
 8000f7e:	e7f2      	b.n	8000f66 <__libc_init_array+0x1e>
 8000f80:	08000fa8 	.word	0x08000fa8
 8000f84:	08000fa8 	.word	0x08000fa8
 8000f88:	08000fa8 	.word	0x08000fa8
 8000f8c:	08000fac 	.word	0x08000fac

08000f90 <_init>:
 8000f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f92:	bf00      	nop
 8000f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f96:	bc08      	pop	{r3}
 8000f98:	469e      	mov	lr, r3
 8000f9a:	4770      	bx	lr

08000f9c <_fini>:
 8000f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f9e:	bf00      	nop
 8000fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fa2:	bc08      	pop	{r3}
 8000fa4:	469e      	mov	lr, r3
 8000fa6:	4770      	bx	lr
