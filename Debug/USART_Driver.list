
USART_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000048c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000620  08000628  00010628  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000620  08000620  00010628  2**0
                  CONTENTS
  4 .ARM          00000000  08000620  08000620  00010628  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000620  08000628  00010628  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000620  08000620  00010620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000624  08000624  00010624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010628  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000628  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000628  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010628  2**0
                  CONTENTS, READONLY
 12 .debug_info   000008fd  00000000  00000000  00010658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000287  00000000  00000000  00010f55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000088  00000000  00000000  000111e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000060  00000000  00000000  00011268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ebe1  00000000  00000000  000112c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000e81  00000000  00000000  0001fea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053ede  00000000  00000000  00020d2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00074c08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000130  00000000  00000000  00074c58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000608 	.word	0x08000608

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000608 	.word	0x08000608

080001d4 <Select_UART>:
 * 	@param	The USART_Config structure defined in the USART.h file is passed into the function and reads which
 * 			peripheral the user chooses to use.
 */

void Select_UART(USART_TypeDef *GPIOx)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	if((GPIOx) == USART2)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	4a2e      	ldr	r2, [pc, #184]	; (8000298 <Select_UART+0xc4>)
 80001e0:	4293      	cmp	r3, r2
 80001e2:	d118      	bne.n	8000216 <Select_UART+0x42>
	{
		/*Enable Clock access to GPIO ports associated with USART2 Tx/Rx peripheral.
		 *Pin PA2/PA3 and PD5/PD6 allow for use of USART2 peripheral.*/
		RCC->AHB1ENR = RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIODEN;
 80001e4:	4b2d      	ldr	r3, [pc, #180]	; (800029c <Select_UART+0xc8>)
 80001e6:	2209      	movs	r2, #9
 80001e8:	631a      	str	r2, [r3, #48]	; 0x30

		/*Set respective pins to alternate function mode in the MODER register*/
		GPIOA->MODER = GPIO_MODER2_AF | GPIO_MODER3_AF;
 80001ea:	4b2d      	ldr	r3, [pc, #180]	; (80002a0 <Select_UART+0xcc>)
 80001ec:	2220      	movs	r2, #32
 80001ee:	601a      	str	r2, [r3, #0]
		GPIOD->MODER = GPIO_MODER5_AF | GPIO_MODER6_AF;
 80001f0:	4b2c      	ldr	r3, [pc, #176]	; (80002a4 <Select_UART+0xd0>)
 80001f2:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80001f6:	601a      	str	r2, [r3, #0]

		/*Select Alternate function mode 07 in the Alternate function register
		 * to select the USART2 peripheral.
		 */
		GPIOA->AFR[0] = GPIO_AFR2_AF07 | GPIO_AFR3_AF07;
 80001f8:	4b29      	ldr	r3, [pc, #164]	; (80002a0 <Select_UART+0xcc>)
 80001fa:	f44f 42ee 	mov.w	r2, #30464	; 0x7700
 80001fe:	621a      	str	r2, [r3, #32]
		GPIOD->AFR[0] = GPIO_AFR5_AF07 | GPIO_AFR6_AF07;
 8000200:	4b28      	ldr	r3, [pc, #160]	; (80002a4 <Select_UART+0xd0>)
 8000202:	f04f 62ee 	mov.w	r2, #124780544	; 0x7700000
 8000206:	621a      	str	r2, [r3, #32]

		/*Enable Clock access to USART2 via the APB1ENR*/
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000208:	4b24      	ldr	r3, [pc, #144]	; (800029c <Select_UART+0xc8>)
 800020a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800020c:	4a23      	ldr	r2, [pc, #140]	; (800029c <Select_UART+0xc8>)
 800020e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000212:	6413      	str	r3, [r2, #64]	; 0x40
		GPIOC->AFR[0] = GPIO_AFR6_AF08 | GPIO_AFR7_AF08;

		/*Allow access to USART6 peripheral via APB2 bus*/
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
	}
}
 8000214:	e03a      	b.n	800028c <Select_UART+0xb8>
	else if ((GPIOx) == USART1)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4a23      	ldr	r2, [pc, #140]	; (80002a8 <Select_UART+0xd4>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d119      	bne.n	8000252 <Select_UART+0x7e>
		RCC->AHB1ENR = RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN;
 800021e:	4b1f      	ldr	r3, [pc, #124]	; (800029c <Select_UART+0xc8>)
 8000220:	2203      	movs	r2, #3
 8000222:	631a      	str	r2, [r3, #48]	; 0x30
		GPIOA->MODER = GPIO_MODER9_AF | GPIO_MODER10_AF;
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <Select_UART+0xcc>)
 8000226:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
 800022a:	601a      	str	r2, [r3, #0]
		GPIOB->MODER = GPIO_MODER6_AF | GPIO_MODER7_AF;
 800022c:	4b1f      	ldr	r3, [pc, #124]	; (80002ac <Select_UART+0xd8>)
 800022e:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8000232:	601a      	str	r2, [r3, #0]
		GPIOA->AFR[1] = GPIO_AFR9_AF07 | GPIO_AFR10_AF07;
 8000234:	4b1a      	ldr	r3, [pc, #104]	; (80002a0 <Select_UART+0xcc>)
 8000236:	f44f 62ee 	mov.w	r2, #1904	; 0x770
 800023a:	625a      	str	r2, [r3, #36]	; 0x24
		GPIOD->AFR[0] = GPIO_AFR6_AF07 | GPIO_AFR7_AF07;
 800023c:	4b19      	ldr	r3, [pc, #100]	; (80002a4 <Select_UART+0xd0>)
 800023e:	f04f 42ee 	mov.w	r2, #1996488704	; 0x77000000
 8000242:	621a      	str	r2, [r3, #32]
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8000244:	4b15      	ldr	r3, [pc, #84]	; (800029c <Select_UART+0xc8>)
 8000246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000248:	4a14      	ldr	r2, [pc, #80]	; (800029c <Select_UART+0xc8>)
 800024a:	f043 0310 	orr.w	r3, r3, #16
 800024e:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000250:	e01c      	b.n	800028c <Select_UART+0xb8>
	else if ((GPIOx) == USART6)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4a16      	ldr	r2, [pc, #88]	; (80002b0 <Select_UART+0xdc>)
 8000256:	4293      	cmp	r3, r2
 8000258:	d118      	bne.n	800028c <Select_UART+0xb8>
		RCC->AHB1ENR = RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOCEN;
 800025a:	4b10      	ldr	r3, [pc, #64]	; (800029c <Select_UART+0xc8>)
 800025c:	2205      	movs	r2, #5
 800025e:	631a      	str	r2, [r3, #48]	; 0x30
		GPIOA->MODER = GPIO_MODER11_AF | GPIO_MODER12_AF;
 8000260:	4b0f      	ldr	r3, [pc, #60]	; (80002a0 <Select_UART+0xcc>)
 8000262:	f04f 7220 	mov.w	r2, #41943040	; 0x2800000
 8000266:	601a      	str	r2, [r3, #0]
		GPIOC->MODER = GPIO_MODER6_AF | GPIO_MODER7_AF;
 8000268:	4b12      	ldr	r3, [pc, #72]	; (80002b4 <Select_UART+0xe0>)
 800026a:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800026e:	601a      	str	r2, [r3, #0]
		GPIOA->AFR[1] = GPIO_AFR11_AF08 | GPIO_AFR12_AF08;
 8000270:	4b0b      	ldr	r3, [pc, #44]	; (80002a0 <Select_UART+0xcc>)
 8000272:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000276:	625a      	str	r2, [r3, #36]	; 0x24
		GPIOC->AFR[0] = GPIO_AFR6_AF08 | GPIO_AFR7_AF08;
 8000278:	4b0e      	ldr	r3, [pc, #56]	; (80002b4 <Select_UART+0xe0>)
 800027a:	f04f 4208 	mov.w	r2, #2281701376	; 0x88000000
 800027e:	621a      	str	r2, [r3, #32]
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 8000280:	4b06      	ldr	r3, [pc, #24]	; (800029c <Select_UART+0xc8>)
 8000282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000284:	4a05      	ldr	r2, [pc, #20]	; (800029c <Select_UART+0xc8>)
 8000286:	f043 0320 	orr.w	r3, r3, #32
 800028a:	6453      	str	r3, [r2, #68]	; 0x44
}
 800028c:	bf00      	nop
 800028e:	370c      	adds	r7, #12
 8000290:	46bd      	mov	sp, r7
 8000292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000296:	4770      	bx	lr
 8000298:	40004400 	.word	0x40004400
 800029c:	40023800 	.word	0x40023800
 80002a0:	40020000 	.word	0x40020000
 80002a4:	40020c00 	.word	0x40020c00
 80002a8:	40011000 	.word	0x40011000
 80002ac:	40020400 	.word	0x40020400
 80002b0:	40011400 	.word	0x40011400
 80002b4:	40020800 	.word	0x40020800

080002b8 <Set_BaudRate>:
 *@param	USART_Config points to the USART_Config_t data structure and ClockTypes points to the
 *			RCC_ClockTypes_t data structure, both present in the UART.h header file.
 *
 */
void Set_BaudRate(USART_Config_t *USART_Config, RCC_ClockTypes_t *ClockTypes)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b08b      	sub	sp, #44	; 0x2c
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
 80002c0:	6039      	str	r1, [r7, #0]
	 * respective bus.
	 */
	uint32_t periph_clk, over8, usartdiv, baudrate;
	uint32_t mantissa_value, fraction_value, tempvariable;

	over8 = (((USART_Config->USARTx)->CR1) & USART_CR1_OVER8_Mask) >> 15;
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	68db      	ldr	r3, [r3, #12]
 80002c8:	0bdb      	lsrs	r3, r3, #15
 80002ca:	f003 0301 	and.w	r3, r3, #1
 80002ce:	61fb      	str	r3, [r7, #28]
	baudrate = USART_Config->USART_BaudRate;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	689b      	ldr	r3, [r3, #8]
 80002d4:	61bb      	str	r3, [r7, #24]
	tempvariable = 0;
 80002d6:	2300      	movs	r3, #0
 80002d8:	623b      	str	r3, [r7, #32]

	if(USART_Config->USARTx == USART2)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4a33      	ldr	r2, [pc, #204]	; (80003ac <Set_BaudRate+0xf4>)
 80002e0:	4293      	cmp	r3, r2
 80002e2:	d103      	bne.n	80002ec <Set_BaudRate+0x34>
	{
		periph_clk = ClockTypes->PCLK1_FREQ;
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	689b      	ldr	r3, [r3, #8]
 80002e8:	627b      	str	r3, [r7, #36]	; 0x24
 80002ea:	e002      	b.n	80002f2 <Set_BaudRate+0x3a>
	}
	else
	{
		periph_clk = ClockTypes->PCLK2_FREQ;
 80002ec:	683b      	ldr	r3, [r7, #0]
 80002ee:	68db      	ldr	r3, [r3, #12]
 80002f0:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/*Over-sampling by 16*/
	if(over8 == 0)
 80002f2:	69fb      	ldr	r3, [r7, #28]
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d125      	bne.n	8000344 <Set_BaudRate+0x8c>
	{
		usartdiv = ((periph_clk * 100)/(16 * baudrate));
 80002f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002fa:	2264      	movs	r2, #100	; 0x64
 80002fc:	fb03 f202 	mul.w	r2, r3, r2
 8000300:	69bb      	ldr	r3, [r7, #24]
 8000302:	011b      	lsls	r3, r3, #4
 8000304:	fbb2 f3f3 	udiv	r3, r2, r3
 8000308:	617b      	str	r3, [r7, #20]
		mantissa_value = usartdiv/100;
 800030a:	697b      	ldr	r3, [r7, #20]
 800030c:	4a28      	ldr	r2, [pc, #160]	; (80003b0 <Set_BaudRate+0xf8>)
 800030e:	fba2 2303 	umull	r2, r3, r2, r3
 8000312:	095b      	lsrs	r3, r3, #5
 8000314:	613b      	str	r3, [r7, #16]
		tempvariable |= (mantissa_value << 4);
 8000316:	693b      	ldr	r3, [r7, #16]
 8000318:	011b      	lsls	r3, r3, #4
 800031a:	6a3a      	ldr	r2, [r7, #32]
 800031c:	4313      	orrs	r3, r2
 800031e:	623b      	str	r3, [r7, #32]
		fraction_value = (((usartdiv - (mantissa_value * 100)) * 16) + 50)/100;
 8000320:	693b      	ldr	r3, [r7, #16]
 8000322:	2264      	movs	r2, #100	; 0x64
 8000324:	fb02 f303 	mul.w	r3, r2, r3
 8000328:	697a      	ldr	r2, [r7, #20]
 800032a:	1ad3      	subs	r3, r2, r3
 800032c:	011b      	lsls	r3, r3, #4
 800032e:	3332      	adds	r3, #50	; 0x32
 8000330:	4a1f      	ldr	r2, [pc, #124]	; (80003b0 <Set_BaudRate+0xf8>)
 8000332:	fba2 2303 	umull	r2, r3, r2, r3
 8000336:	095b      	lsrs	r3, r3, #5
 8000338:	60fb      	str	r3, [r7, #12]
		tempvariable |= fraction_value;
 800033a:	6a3a      	ldr	r2, [r7, #32]
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	4313      	orrs	r3, r2
 8000340:	623b      	str	r3, [r7, #32]
 8000342:	e024      	b.n	800038e <Set_BaudRate+0xd6>
	}

	/*over-sampling by 8*/
	else
	{
		usartdiv = ((periph_clk * 100)/(8 * baudrate));
 8000344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000346:	2264      	movs	r2, #100	; 0x64
 8000348:	fb03 f202 	mul.w	r2, r3, r2
 800034c:	69bb      	ldr	r3, [r7, #24]
 800034e:	00db      	lsls	r3, r3, #3
 8000350:	fbb2 f3f3 	udiv	r3, r2, r3
 8000354:	617b      	str	r3, [r7, #20]
		mantissa_value = usartdiv/100;
 8000356:	697b      	ldr	r3, [r7, #20]
 8000358:	4a15      	ldr	r2, [pc, #84]	; (80003b0 <Set_BaudRate+0xf8>)
 800035a:	fba2 2303 	umull	r2, r3, r2, r3
 800035e:	095b      	lsrs	r3, r3, #5
 8000360:	613b      	str	r3, [r7, #16]
		tempvariable |= (mantissa_value << 4);
 8000362:	693b      	ldr	r3, [r7, #16]
 8000364:	011b      	lsls	r3, r3, #4
 8000366:	6a3a      	ldr	r2, [r7, #32]
 8000368:	4313      	orrs	r3, r2
 800036a:	623b      	str	r3, [r7, #32]
		fraction_value = (((usartdiv - (mantissa_value * 100)) * 8) + 50)/100;
 800036c:	693b      	ldr	r3, [r7, #16]
 800036e:	2264      	movs	r2, #100	; 0x64
 8000370:	fb02 f303 	mul.w	r3, r2, r3
 8000374:	697a      	ldr	r2, [r7, #20]
 8000376:	1ad3      	subs	r3, r2, r3
 8000378:	00db      	lsls	r3, r3, #3
 800037a:	3332      	adds	r3, #50	; 0x32
 800037c:	4a0c      	ldr	r2, [pc, #48]	; (80003b0 <Set_BaudRate+0xf8>)
 800037e:	fba2 2303 	umull	r2, r3, r2, r3
 8000382:	095b      	lsrs	r3, r3, #5
 8000384:	60fb      	str	r3, [r7, #12]
		tempvariable |= fraction_value;
 8000386:	6a3a      	ldr	r2, [r7, #32]
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	4313      	orrs	r3, r2
 800038c:	623b      	str	r3, [r7, #32]
	}

	(USART_Config->USARTx)->BRR |= tempvariable;
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	6899      	ldr	r1, [r3, #8]
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	6a3a      	ldr	r2, [r7, #32]
 800039a:	430a      	orrs	r2, r1
 800039c:	609a      	str	r2, [r3, #8]

}
 800039e:	bf00      	nop
 80003a0:	372c      	adds	r7, #44	; 0x2c
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	40004400 	.word	0x40004400
 80003b0:	51eb851f 	.word	0x51eb851f

080003b4 <UART_Init>:



void UART_Init(USART_Config_t *USART_Config, RCC_ClockTypes_t *ClockType)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
 80003bc:	6039      	str	r1, [r7, #0]
	/*Select specific USART module*/
	Select_UART(USART_Config->USARTx);
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	4618      	mov	r0, r3
 80003c4:	f7ff ff06 	bl	80001d4 <Select_UART>

	/*Select the Word-Length (8 bits/9 bits)*/
	if(USART_Config->USART_WordLength == USART_WORDLEN_8BITS)
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	799b      	ldrb	r3, [r3, #6]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d108      	bne.n	80003e2 <UART_Init+0x2e>
	{
		(USART_Config->USARTx)->CR1 &= ~(1U << 12);
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	68da      	ldr	r2, [r3, #12]
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80003de:	60da      	str	r2, [r3, #12]
 80003e0:	e00b      	b.n	80003fa <UART_Init+0x46>
	}

	else if(USART_Config->USART_WordLength == USART_WORDLEN_9BITS)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	799b      	ldrb	r3, [r3, #6]
 80003e6:	2b01      	cmp	r3, #1
 80003e8:	d107      	bne.n	80003fa <UART_Init+0x46>
	{
		(USART_Config->USARTx)->CR1 |= (1U << 12);
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	68da      	ldr	r2, [r3, #12]
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80003f8:	60da      	str	r2, [r3, #12]
	}

	/*Select/Set the number of stop bits (0.5, 1, 1.5, 2)*/
	if(USART_Config->USART_StopBits == USART_STOPBITS_1)
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	795b      	ldrb	r3, [r3, #5]
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d110      	bne.n	8000424 <UART_Init+0x70>
	{
		(USART_Config->USARTx)->CR2 &= ~(1U << 12);
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	691a      	ldr	r2, [r3, #16]
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000410:	611a      	str	r2, [r3, #16]
		(USART_Config->USARTx)->CR2 &= ~(1U << 13);
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	691a      	ldr	r2, [r3, #16]
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000420:	611a      	str	r2, [r3, #16]
 8000422:	e03d      	b.n	80004a0 <UART_Init+0xec>
	}

	else if(USART_Config->USART_StopBits == USART_STOPBITS_0_5)
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	795b      	ldrb	r3, [r3, #5]
 8000428:	2b01      	cmp	r3, #1
 800042a:	d110      	bne.n	800044e <UART_Init+0x9a>
	{
		(USART_Config->USARTx)->CR2 |= (1U << 12);
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	691a      	ldr	r2, [r3, #16]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800043a:	611a      	str	r2, [r3, #16]
		(USART_Config->USARTx)->CR2 &= ~(1U << 13);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	691a      	ldr	r2, [r3, #16]
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800044a:	611a      	str	r2, [r3, #16]
 800044c:	e028      	b.n	80004a0 <UART_Init+0xec>
	}

	else if(USART_Config->USART_StopBits == USART_STOPBITS_2)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	795b      	ldrb	r3, [r3, #5]
 8000452:	2b02      	cmp	r3, #2
 8000454:	d110      	bne.n	8000478 <UART_Init+0xc4>
	{
		(USART_Config->USARTx)->CR2 &= ~(1U << 12);
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	691a      	ldr	r2, [r3, #16]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000464:	611a      	str	r2, [r3, #16]
		(USART_Config->USARTx)->CR2 |= (1U << 13);
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	691a      	ldr	r2, [r3, #16]
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000474:	611a      	str	r2, [r3, #16]
 8000476:	e013      	b.n	80004a0 <UART_Init+0xec>
	}

	else if(USART_Config->USART_StopBits == USART_STOPBITS_1_5)
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	795b      	ldrb	r3, [r3, #5]
 800047c:	2b03      	cmp	r3, #3
 800047e:	d10f      	bne.n	80004a0 <UART_Init+0xec>
	{
		(USART_Config->USARTx)->CR2 |= (1U << 12);
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	691a      	ldr	r2, [r3, #16]
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800048e:	611a      	str	r2, [r3, #16]
		(USART_Config->USARTx)->CR2 |= (1U << 13);
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	691a      	ldr	r2, [r3, #16]
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800049e:	611a      	str	r2, [r3, #16]
	}

	/*Select transmission direction (Tx, Rx or Tx & Rx)*/
	if(USART_Config->USART_Mode == USART_DIRECTION_TX)
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	791b      	ldrb	r3, [r3, #4]
 80004a4:	2b01      	cmp	r3, #1
 80004a6:	d108      	bne.n	80004ba <UART_Init+0x106>
	{
		(USART_Config->USARTx)->CR1 |= (1U << 3);
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	68da      	ldr	r2, [r3, #12]
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	f042 0208 	orr.w	r2, r2, #8
 80004b6:	60da      	str	r2, [r3, #12]
 80004b8:	e014      	b.n	80004e4 <UART_Init+0x130>
	}

	else if(USART_Config->USART_Mode == USART_DIRECTION_RX)
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	791b      	ldrb	r3, [r3, #4]
 80004be:	2b02      	cmp	r3, #2
 80004c0:	d108      	bne.n	80004d4 <UART_Init+0x120>
	{
		(USART_Config->USARTx)->CR1 |= (1U << 2);
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	68da      	ldr	r2, [r3, #12]
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	f042 0204 	orr.w	r2, r2, #4
 80004d0:	60da      	str	r2, [r3, #12]
 80004d2:	e007      	b.n	80004e4 <UART_Init+0x130>
	}

	else if(USART_Config->USART_Mode == USART_DIRECTION_TXRX)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	791b      	ldrb	r3, [r3, #4]
 80004d8:	2b03      	cmp	r3, #3
 80004da:	d103      	bne.n	80004e4 <UART_Init+0x130>
	{
		(USART_Config->USARTx)->CR1 = (1U << 2) | (1U << 3);
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	220c      	movs	r2, #12
 80004e2:	60da      	str	r2, [r3, #12]
	}

	/*Set the baud-rate*/
	Set_BaudRate(USART_Config, ClockType);
 80004e4:	6839      	ldr	r1, [r7, #0]
 80004e6:	6878      	ldr	r0, [r7, #4]
 80004e8:	f7ff fee6 	bl	80002b8 <Set_BaudRate>

	/*Enable USARt Module*/
	(USART_Config->USARTx)->CR1 |= USART_CR1_UE_Mask;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	68da      	ldr	r2, [r3, #12]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80004fa:	60da      	str	r2, [r3, #12]

}
 80004fc:	bf00      	nop
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}

08000504 <UART_Write>:

void UART_Write(USART_TypeDef *USARTx, char letter)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	460b      	mov	r3, r1
 800050e:	70fb      	strb	r3, [r7, #3]
	while(!((USARTx->SR) & USART_SR_TXE_Mask)){}
 8000510:	bf00      	nop
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800051a:	2b00      	cmp	r3, #0
 800051c:	d0f9      	beq.n	8000512 <UART_Write+0xe>
	USARTx->DR = (letter & 0xFF);
 800051e:	78fa      	ldrb	r2, [r7, #3]
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	605a      	str	r2, [r3, #4]
}
 8000524:	bf00      	nop
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <main>:
#include "stm32f4xx.h"
#include "UART.h"


int main()
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b088      	sub	sp, #32
 8000534:	af00      	add	r7, sp, #0
	USART_Config_t USARTx;
	RCC_ClockTypes_t Clock;
	USARTx.USARTx = USART2;
 8000536:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <main+0x38>)
 8000538:	617b      	str	r3, [r7, #20]
	USARTx.USART_BaudRate = 115200;
 800053a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800053e:	61fb      	str	r3, [r7, #28]
	USARTx.USART_Mode = USART_DIRECTION_TX;
 8000540:	2301      	movs	r3, #1
 8000542:	763b      	strb	r3, [r7, #24]
	USARTx.USART_StopBits = USART_STOPBITS_1;
 8000544:	2300      	movs	r3, #0
 8000546:	767b      	strb	r3, [r7, #25]
	USARTx.USART_WordLength = USART_WORDLEN_8BITS;
 8000548:	2300      	movs	r3, #0
 800054a:	76bb      	strb	r3, [r7, #26]

	UART_Init(&USARTx, &Clock);
 800054c:	1d3a      	adds	r2, r7, #4
 800054e:	f107 0314 	add.w	r3, r7, #20
 8000552:	4611      	mov	r1, r2
 8000554:	4618      	mov	r0, r3
 8000556:	f7ff ff2d 	bl	80003b4 <UART_Init>
	while(1)
	{
		UART_Write(USARTx.USARTx, 'a');
 800055a:	697b      	ldr	r3, [r7, #20]
 800055c:	2161      	movs	r1, #97	; 0x61
 800055e:	4618      	mov	r0, r3
 8000560:	f7ff ffd0 	bl	8000504 <UART_Write>
 8000564:	e7f9      	b.n	800055a <main+0x2a>
 8000566:	bf00      	nop
 8000568:	40004400 	.word	0x40004400

0800056c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800056c:	480d      	ldr	r0, [pc, #52]	; (80005a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800056e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000570:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000574:	480c      	ldr	r0, [pc, #48]	; (80005a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000576:	490d      	ldr	r1, [pc, #52]	; (80005ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000578:	4a0d      	ldr	r2, [pc, #52]	; (80005b0 <LoopForever+0xe>)
  movs r3, #0
 800057a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800057c:	e002      	b.n	8000584 <LoopCopyDataInit>

0800057e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800057e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000580:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000582:	3304      	adds	r3, #4

08000584 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000584:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000586:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000588:	d3f9      	bcc.n	800057e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800058a:	4a0a      	ldr	r2, [pc, #40]	; (80005b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800058c:	4c0a      	ldr	r4, [pc, #40]	; (80005b8 <LoopForever+0x16>)
  movs r3, #0
 800058e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000590:	e001      	b.n	8000596 <LoopFillZerobss>

08000592 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000592:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000594:	3204      	adds	r2, #4

08000596 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000596:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000598:	d3fb      	bcc.n	8000592 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800059a:	f000 f811 	bl	80005c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800059e:	f7ff ffc7 	bl	8000530 <main>

080005a2 <LoopForever>:

LoopForever:
  b LoopForever
 80005a2:	e7fe      	b.n	80005a2 <LoopForever>
  ldr   r0, =_estack
 80005a4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80005a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005ac:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80005b0:	08000628 	.word	0x08000628
  ldr r2, =_sbss
 80005b4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80005b8:	2000001c 	.word	0x2000001c

080005bc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005bc:	e7fe      	b.n	80005bc <ADC_IRQHandler>
	...

080005c0 <__libc_init_array>:
 80005c0:	b570      	push	{r4, r5, r6, lr}
 80005c2:	4d0d      	ldr	r5, [pc, #52]	; (80005f8 <__libc_init_array+0x38>)
 80005c4:	4c0d      	ldr	r4, [pc, #52]	; (80005fc <__libc_init_array+0x3c>)
 80005c6:	1b64      	subs	r4, r4, r5
 80005c8:	10a4      	asrs	r4, r4, #2
 80005ca:	2600      	movs	r6, #0
 80005cc:	42a6      	cmp	r6, r4
 80005ce:	d109      	bne.n	80005e4 <__libc_init_array+0x24>
 80005d0:	4d0b      	ldr	r5, [pc, #44]	; (8000600 <__libc_init_array+0x40>)
 80005d2:	4c0c      	ldr	r4, [pc, #48]	; (8000604 <__libc_init_array+0x44>)
 80005d4:	f000 f818 	bl	8000608 <_init>
 80005d8:	1b64      	subs	r4, r4, r5
 80005da:	10a4      	asrs	r4, r4, #2
 80005dc:	2600      	movs	r6, #0
 80005de:	42a6      	cmp	r6, r4
 80005e0:	d105      	bne.n	80005ee <__libc_init_array+0x2e>
 80005e2:	bd70      	pop	{r4, r5, r6, pc}
 80005e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80005e8:	4798      	blx	r3
 80005ea:	3601      	adds	r6, #1
 80005ec:	e7ee      	b.n	80005cc <__libc_init_array+0xc>
 80005ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80005f2:	4798      	blx	r3
 80005f4:	3601      	adds	r6, #1
 80005f6:	e7f2      	b.n	80005de <__libc_init_array+0x1e>
 80005f8:	08000620 	.word	0x08000620
 80005fc:	08000620 	.word	0x08000620
 8000600:	08000620 	.word	0x08000620
 8000604:	08000624 	.word	0x08000624

08000608 <_init>:
 8000608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800060a:	bf00      	nop
 800060c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800060e:	bc08      	pop	{r3}
 8000610:	469e      	mov	lr, r3
 8000612:	4770      	bx	lr

08000614 <_fini>:
 8000614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000616:	bf00      	nop
 8000618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800061a:	bc08      	pop	{r3}
 800061c:	469e      	mov	lr, r3
 800061e:	4770      	bx	lr
